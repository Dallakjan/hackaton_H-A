{
  "version": 3,
  "sources": ["../../node_modules/pluralize/pluralize.js", "../../node_modules/normalize-strings/charmap.json", "../../node_modules/normalize-strings/index.js", "../../node_modules/syllable/index.js", "../../node_modules/syllable/problematic.js", "../../node_modules/text-readability/main.js", "../../node_modules/text-readability/easy_words.js"],
  "sourcesContent": ["/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Lower cased words. E.g. \"hello\".\n    if (word === word.toLowerCase()) return token.toLowerCase();\n\n    // Upper cased words. E.g. \"WHISKY\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word      The word to pluralize\n   * @param  {number}  count     How many of the word exist\n   * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['passerby', 'passersby']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/\\b((?:tit)?m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],\n    [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'aircraft',\n    'alcohol',\n    'ammo',\n    'analytics',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'firmware',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'hardware',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'mud',\n    'manga',\n    'news',\n    'only',\n    'personnel',\n    'pike',\n    'plankton',\n    'pliers',\n    'police',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'software',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transportation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    /pok[eé]mon$/i,\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n", "{\"105\":\"i\",\"192\":\"A\",\"193\":\"A\",\"194\":\"A\",\"195\":\"A\",\"196\":\"A\",\"197\":\"A\",\"199\":\"C\",\"200\":\"E\",\"201\":\"E\",\"202\":\"E\",\"203\":\"E\",\"204\":\"I\",\"205\":\"I\",\"206\":\"I\",\"207\":\"I\",\"209\":\"N\",\"210\":\"O\",\"211\":\"O\",\"212\":\"O\",\"213\":\"O\",\"214\":\"O\",\"216\":\"O\",\"217\":\"U\",\"218\":\"U\",\"219\":\"U\",\"220\":\"U\",\"221\":\"Y\",\"224\":\"a\",\"225\":\"a\",\"226\":\"a\",\"227\":\"a\",\"228\":\"a\",\"229\":\"a\",\"231\":\"c\",\"232\":\"e\",\"233\":\"e\",\"234\":\"e\",\"235\":\"e\",\"236\":\"i\",\"237\":\"i\",\"238\":\"i\",\"239\":\"i\",\"241\":\"n\",\"242\":\"o\",\"243\":\"o\",\"244\":\"o\",\"245\":\"o\",\"246\":\"o\",\"248\":\"o\",\"249\":\"u\",\"250\":\"u\",\"251\":\"u\",\"252\":\"u\",\"253\":\"y\",\"255\":\"y\",\"256\":\"A\",\"257\":\"a\",\"258\":\"A\",\"259\":\"a\",\"260\":\"A\",\"261\":\"a\",\"262\":\"C\",\"263\":\"c\",\"264\":\"C\",\"265\":\"c\",\"266\":\"C\",\"267\":\"c\",\"268\":\"C\",\"269\":\"c\",\"270\":\"D\",\"271\":\"d\",\"272\":\"D\",\"273\":\"d\",\"274\":\"E\",\"275\":\"e\",\"276\":\"E\",\"277\":\"e\",\"278\":\"E\",\"279\":\"e\",\"280\":\"E\",\"281\":\"e\",\"282\":\"E\",\"283\":\"e\",\"284\":\"G\",\"285\":\"g\",\"286\":\"G\",\"287\":\"g\",\"288\":\"G\",\"289\":\"g\",\"290\":\"G\",\"291\":\"g\",\"292\":\"H\",\"293\":\"h\",\"294\":\"H\",\"295\":\"h\",\"296\":\"I\",\"297\":\"i\",\"298\":\"I\",\"299\":\"i\",\"300\":\"I\",\"301\":\"i\",\"302\":\"I\",\"303\":\"i\",\"304\":\"I\",\"308\":\"J\",\"309\":\"j\",\"310\":\"K\",\"311\":\"k\",\"313\":\"L\",\"314\":\"l\",\"315\":\"L\",\"316\":\"l\",\"317\":\"L\",\"318\":\"l\",\"319\":\"L\",\"320\":\"l\",\"321\":\"L\",\"322\":\"l\",\"323\":\"N\",\"324\":\"n\",\"325\":\"N\",\"326\":\"n\",\"327\":\"N\",\"328\":\"n\",\"332\":\"O\",\"333\":\"o\",\"334\":\"O\",\"335\":\"o\",\"336\":\"O\",\"337\":\"o\",\"338\":\"O\",\"339\":\"o\",\"340\":\"R\",\"341\":\"r\",\"342\":\"R\",\"343\":\"r\",\"344\":\"R\",\"345\":\"r\",\"346\":\"S\",\"347\":\"s\",\"348\":\"S\",\"349\":\"s\",\"350\":\"S\",\"351\":\"s\",\"352\":\"S\",\"353\":\"s\",\"354\":\"T\",\"355\":\"t\",\"356\":\"T\",\"357\":\"t\",\"358\":\"T\",\"359\":\"t\",\"360\":\"U\",\"361\":\"u\",\"362\":\"U\",\"363\":\"u\",\"364\":\"U\",\"365\":\"u\",\"366\":\"U\",\"367\":\"u\",\"368\":\"U\",\"369\":\"u\",\"370\":\"U\",\"371\":\"u\",\"372\":\"W\",\"373\":\"w\",\"374\":\"Y\",\"375\":\"y\",\"376\":\"Y\",\"377\":\"Z\",\"378\":\"z\",\"379\":\"Z\",\"380\":\"z\",\"381\":\"Z\",\"382\":\"z\",\"384\":\"b\",\"385\":\"B\",\"386\":\"B\",\"387\":\"b\",\"390\":\"O\",\"391\":\"C\",\"392\":\"c\",\"393\":\"D\",\"394\":\"D\",\"395\":\"D\",\"396\":\"d\",\"398\":\"E\",\"400\":\"E\",\"401\":\"F\",\"402\":\"f\",\"403\":\"G\",\"407\":\"I\",\"408\":\"K\",\"409\":\"k\",\"410\":\"l\",\"412\":\"M\",\"413\":\"N\",\"414\":\"n\",\"415\":\"O\",\"416\":\"O\",\"417\":\"o\",\"420\":\"P\",\"421\":\"p\",\"422\":\"R\",\"427\":\"t\",\"428\":\"T\",\"429\":\"t\",\"430\":\"T\",\"431\":\"U\",\"432\":\"u\",\"434\":\"V\",\"435\":\"Y\",\"436\":\"y\",\"437\":\"Z\",\"438\":\"z\",\"461\":\"A\",\"462\":\"a\",\"463\":\"I\",\"464\":\"i\",\"465\":\"O\",\"466\":\"o\",\"467\":\"U\",\"468\":\"u\",\"477\":\"e\",\"484\":\"G\",\"485\":\"g\",\"486\":\"G\",\"487\":\"g\",\"488\":\"K\",\"489\":\"k\",\"490\":\"O\",\"491\":\"o\",\"500\":\"G\",\"501\":\"g\",\"504\":\"N\",\"505\":\"n\",\"512\":\"A\",\"513\":\"a\",\"514\":\"A\",\"515\":\"a\",\"516\":\"E\",\"517\":\"e\",\"518\":\"E\",\"519\":\"e\",\"520\":\"I\",\"521\":\"i\",\"522\":\"I\",\"523\":\"i\",\"524\":\"O\",\"525\":\"o\",\"526\":\"O\",\"527\":\"o\",\"528\":\"R\",\"529\":\"r\",\"530\":\"R\",\"531\":\"r\",\"532\":\"U\",\"533\":\"u\",\"534\":\"U\",\"535\":\"u\",\"536\":\"S\",\"537\":\"s\",\"538\":\"T\",\"539\":\"t\",\"542\":\"H\",\"543\":\"h\",\"544\":\"N\",\"545\":\"d\",\"548\":\"Z\",\"549\":\"z\",\"550\":\"A\",\"551\":\"a\",\"552\":\"E\",\"553\":\"e\",\"558\":\"O\",\"559\":\"o\",\"562\":\"Y\",\"563\":\"y\",\"564\":\"l\",\"565\":\"n\",\"566\":\"t\",\"567\":\"j\",\"570\":\"A\",\"571\":\"C\",\"572\":\"c\",\"573\":\"L\",\"574\":\"T\",\"575\":\"s\",\"576\":\"z\",\"579\":\"B\",\"580\":\"U\",\"581\":\"V\",\"582\":\"E\",\"583\":\"e\",\"584\":\"J\",\"585\":\"j\",\"586\":\"Q\",\"587\":\"q\",\"588\":\"R\",\"589\":\"r\",\"590\":\"Y\",\"591\":\"y\",\"592\":\"a\",\"593\":\"a\",\"595\":\"b\",\"596\":\"o\",\"597\":\"c\",\"598\":\"d\",\"599\":\"d\",\"600\":\"e\",\"603\":\"e\",\"604\":\"e\",\"605\":\"e\",\"606\":\"e\",\"607\":\"j\",\"608\":\"g\",\"609\":\"g\",\"610\":\"g\",\"613\":\"h\",\"614\":\"h\",\"616\":\"i\",\"618\":\"i\",\"619\":\"l\",\"620\":\"l\",\"621\":\"l\",\"623\":\"m\",\"624\":\"m\",\"625\":\"m\",\"626\":\"n\",\"627\":\"n\",\"628\":\"n\",\"629\":\"o\",\"633\":\"r\",\"634\":\"r\",\"635\":\"r\",\"636\":\"r\",\"637\":\"r\",\"638\":\"r\",\"639\":\"r\",\"640\":\"r\",\"641\":\"r\",\"642\":\"s\",\"647\":\"t\",\"648\":\"t\",\"649\":\"u\",\"651\":\"v\",\"652\":\"v\",\"653\":\"w\",\"654\":\"y\",\"655\":\"y\",\"656\":\"z\",\"657\":\"z\",\"663\":\"c\",\"665\":\"b\",\"666\":\"e\",\"667\":\"g\",\"668\":\"h\",\"669\":\"j\",\"670\":\"k\",\"671\":\"l\",\"672\":\"q\",\"686\":\"h\",\"688\":\"h\",\"690\":\"j\",\"691\":\"r\",\"692\":\"r\",\"694\":\"r\",\"695\":\"w\",\"696\":\"y\",\"737\":\"l\",\"738\":\"s\",\"739\":\"x\",\"780\":\"v\",\"829\":\"x\",\"851\":\"x\",\"867\":\"a\",\"868\":\"e\",\"869\":\"i\",\"870\":\"o\",\"871\":\"u\",\"872\":\"c\",\"873\":\"d\",\"874\":\"h\",\"875\":\"m\",\"876\":\"r\",\"877\":\"t\",\"878\":\"v\",\"879\":\"x\",\"7424\":\"a\",\"7427\":\"b\",\"7428\":\"c\",\"7429\":\"d\",\"7431\":\"e\",\"7432\":\"e\",\"7433\":\"i\",\"7434\":\"j\",\"7435\":\"k\",\"7436\":\"l\",\"7437\":\"m\",\"7438\":\"n\",\"7439\":\"o\",\"7440\":\"o\",\"7441\":\"o\",\"7442\":\"o\",\"7443\":\"o\",\"7446\":\"o\",\"7447\":\"o\",\"7448\":\"p\",\"7449\":\"r\",\"7450\":\"r\",\"7451\":\"t\",\"7452\":\"u\",\"7453\":\"u\",\"7454\":\"u\",\"7455\":\"m\",\"7456\":\"v\",\"7457\":\"w\",\"7458\":\"z\",\"7522\":\"i\",\"7523\":\"r\",\"7524\":\"u\",\"7525\":\"v\",\"7680\":\"A\",\"7681\":\"a\",\"7682\":\"B\",\"7683\":\"b\",\"7684\":\"B\",\"7685\":\"b\",\"7686\":\"B\",\"7687\":\"b\",\"7690\":\"D\",\"7691\":\"d\",\"7692\":\"D\",\"7693\":\"d\",\"7694\":\"D\",\"7695\":\"d\",\"7696\":\"D\",\"7697\":\"d\",\"7698\":\"D\",\"7699\":\"d\",\"7704\":\"E\",\"7705\":\"e\",\"7706\":\"E\",\"7707\":\"e\",\"7710\":\"F\",\"7711\":\"f\",\"7712\":\"G\",\"7713\":\"g\",\"7714\":\"H\",\"7715\":\"h\",\"7716\":\"H\",\"7717\":\"h\",\"7718\":\"H\",\"7719\":\"h\",\"7720\":\"H\",\"7721\":\"h\",\"7722\":\"H\",\"7723\":\"h\",\"7724\":\"I\",\"7725\":\"i\",\"7728\":\"K\",\"7729\":\"k\",\"7730\":\"K\",\"7731\":\"k\",\"7732\":\"K\",\"7733\":\"k\",\"7734\":\"L\",\"7735\":\"l\",\"7738\":\"L\",\"7739\":\"l\",\"7740\":\"L\",\"7741\":\"l\",\"7742\":\"M\",\"7743\":\"m\",\"7744\":\"M\",\"7745\":\"m\",\"7746\":\"M\",\"7747\":\"m\",\"7748\":\"N\",\"7749\":\"n\",\"7750\":\"N\",\"7751\":\"n\",\"7752\":\"N\",\"7753\":\"n\",\"7754\":\"N\",\"7755\":\"n\",\"7764\":\"P\",\"7765\":\"p\",\"7766\":\"P\",\"7767\":\"p\",\"7768\":\"R\",\"7769\":\"r\",\"7770\":\"R\",\"7771\":\"r\",\"7774\":\"R\",\"7775\":\"r\",\"7776\":\"S\",\"7777\":\"s\",\"7778\":\"S\",\"7779\":\"s\",\"7786\":\"T\",\"7787\":\"t\",\"7788\":\"T\",\"7789\":\"t\",\"7790\":\"T\",\"7791\":\"t\",\"7792\":\"T\",\"7793\":\"t\",\"7794\":\"U\",\"7795\":\"u\",\"7796\":\"U\",\"7797\":\"u\",\"7798\":\"U\",\"7799\":\"u\",\"7804\":\"V\",\"7805\":\"v\",\"7806\":\"V\",\"7807\":\"v\",\"7808\":\"W\",\"7809\":\"w\",\"7810\":\"W\",\"7811\":\"w\",\"7812\":\"W\",\"7813\":\"w\",\"7814\":\"W\",\"7815\":\"w\",\"7816\":\"W\",\"7817\":\"w\",\"7818\":\"X\",\"7819\":\"x\",\"7820\":\"X\",\"7821\":\"x\",\"7822\":\"Y\",\"7823\":\"y\",\"7824\":\"Z\",\"7825\":\"z\",\"7826\":\"Z\",\"7827\":\"z\",\"7828\":\"Z\",\"7829\":\"z\",\"7835\":\"s\",\"7840\":\"A\",\"7841\":\"a\",\"7842\":\"A\",\"7843\":\"a\",\"7864\":\"E\",\"7865\":\"e\",\"7866\":\"E\",\"7867\":\"e\",\"7868\":\"E\",\"7869\":\"e\",\"7880\":\"I\",\"7881\":\"i\",\"7882\":\"I\",\"7883\":\"i\",\"7884\":\"O\",\"7885\":\"o\",\"7886\":\"O\",\"7887\":\"o\",\"7908\":\"U\",\"7909\":\"u\",\"7910\":\"U\",\"7911\":\"u\",\"7922\":\"Y\",\"7923\":\"y\",\"7924\":\"Y\",\"7925\":\"y\",\"7926\":\"Y\",\"7927\":\"y\",\"7928\":\"Y\",\"7929\":\"y\",\"8305\":\"i\",\"8341\":\"h\",\"8342\":\"k\",\"8343\":\"l\",\"8344\":\"m\",\"8345\":\"n\",\"8346\":\"p\",\"8347\":\"s\",\"8348\":\"t\",\"8450\":\"c\",\"8458\":\"g\",\"8459\":\"h\",\"8460\":\"h\",\"8461\":\"h\",\"8464\":\"i\",\"8465\":\"i\",\"8466\":\"l\",\"8467\":\"l\",\"8468\":\"l\",\"8469\":\"n\",\"8472\":\"p\",\"8473\":\"p\",\"8474\":\"q\",\"8475\":\"r\",\"8476\":\"r\",\"8477\":\"r\",\"8484\":\"z\",\"8488\":\"z\",\"8492\":\"b\",\"8493\":\"c\",\"8495\":\"e\",\"8496\":\"e\",\"8497\":\"f\",\"8498\":\"F\",\"8499\":\"m\",\"8500\":\"o\",\"8506\":\"q\",\"8513\":\"g\",\"8514\":\"l\",\"8515\":\"l\",\"8516\":\"y\",\"8517\":\"d\",\"8518\":\"d\",\"8519\":\"e\",\"8520\":\"i\",\"8521\":\"j\",\"8526\":\"f\",\"8579\":\"C\",\"8580\":\"c\",\"8765\":\"s\",\"8766\":\"s\",\"8959\":\"z\",\"8999\":\"x\",\"9746\":\"x\",\"9776\":\"i\",\"9866\":\"i\",\"10005\":\"x\",\"10006\":\"x\",\"10007\":\"x\",\"10008\":\"x\",\"10625\":\"z\",\"10626\":\"z\",\"11362\":\"L\",\"11364\":\"R\",\"11365\":\"a\",\"11366\":\"t\",\"11373\":\"A\",\"11374\":\"M\",\"11375\":\"A\",\"11390\":\"S\",\"11391\":\"Z\",\"19904\":\"i\",\"42893\":\"H\",\"42922\":\"H\",\"42923\":\"E\",\"42924\":\"G\",\"42925\":\"L\",\"42928\":\"K\",\"42929\":\"T\",\"62937\":\"x\"}", "(function(global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(function() {\n      return factory(global, global.document);\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = factory(global, global.document);\n  } else {\n      global.normalize = factory(global, global.document);\n  }\n} (typeof window !== 'undefined' ? window : this, function (window, document) {\n  var charmap = require('./charmap.json');\n  var regex = null;\n  var current_charmap;\n  var old_charmap;\n\n  function normalize(str, custom_charmap) {\n    old_charmap = current_charmap;\n    current_charmap = custom_charmap || charmap;\n\n    regex = (regex && old_charmap === current_charmap) ? regex : buildRegExp(current_charmap);\n\n    return str.replace(regex, function(charToReplace) {\n      return current_charmap[charToReplace.charCodeAt(0)] || charToReplace;\n    });\n  }\n\n  function buildRegExp(charmap){\n     return new RegExp('[' + Object.keys(charmap).map(function(code) {return String.fromCharCode(code); }).join(' ') + ']', 'g');\n   }\n\n  return normalize;\n}));\n", "import pluralize from 'pluralize'\n// @ts-ignore remove when typed.\nimport normalize from 'normalize-strings'\nimport {problematic} from './problematic.js'\n\nconst own = {}.hasOwnProperty\n\n// Two expressions of occurrences which normally would be counted as two\n// syllables, but should be counted as one.\nconst EXPRESSION_MONOSYLLABIC_ONE = new RegExp(\n  [\n    'awe($|d|so)',\n    'cia(?:l|$)',\n    'tia',\n    'cius',\n    'cious',\n    '[^aeiou]giu',\n    '[aeiouy][^aeiouy]ion',\n    'iou',\n    'sia$',\n    'eous$',\n    '[oa]gue$',\n    '.[^aeiuoycgltdb]{2,}ed$',\n    '.ely$',\n    '^jua',\n    'uai',\n    'eau',\n    '^busi$',\n    '(?:[aeiouy](?:' +\n      [\n        '[bcfgklmnprsvwxyz]',\n        'ch',\n        'dg',\n        'g[hn]',\n        'lch',\n        'l[lv]',\n        'mm',\n        'nch',\n        'n[cgn]',\n        'r[bcnsv]',\n        'squ',\n        's[chkls]',\n        'th'\n      ].join('|') +\n      ')ed$)',\n    '(?:[aeiouy](?:' +\n      [\n        '[bdfklmnprstvy]',\n        'ch',\n        'g[hn]',\n        'lch',\n        'l[lv]',\n        'mm',\n        'nch',\n        'nn',\n        'r[nsv]',\n        'squ',\n        's[cklst]',\n        'th'\n      ].join('|') +\n      ')es$)'\n  ].join('|'),\n  'g'\n)\n\nconst EXPRESSION_MONOSYLLABIC_TWO = new RegExp(\n  '[aeiouy](?:' +\n    [\n      '[bcdfgklmnprstvyz]',\n      'ch',\n      'dg',\n      'g[hn]',\n      'l[lv]',\n      'mm',\n      'n[cgns]',\n      'r[cnsv]',\n      'squ',\n      's[cklst]',\n      'th'\n    ].join('|') +\n    ')e$',\n  'g'\n)\n\n// Four expression of occurrences which normally would be counted as one\n// syllable, but should be counted as two.\nconst EXPRESSION_DOUBLE_SYLLABIC_ONE = new RegExp(\n  '(?:' +\n    [\n      '([^aeiouy])\\\\1l',\n      '[^aeiouy]ie(?:r|s?t)',\n      '[aeiouym]bl',\n      'eo',\n      'ism',\n      'asm',\n      'thm',\n      'dnt',\n      'snt',\n      'uity',\n      'dea',\n      'gean',\n      'oa',\n      'ua',\n      'react?',\n      'orbed', // Cancel `'.[^aeiuoycgltdb]{2,}ed$',`\n      'shred', // Cancel `'.[^aeiuoycgltdb]{2,}ed$',`\n      'eings?',\n      '[aeiouy]sh?e[rs]'\n    ].join('|') +\n    ')$',\n  'g'\n)\n\nconst EXPRESSION_DOUBLE_SYLLABIC_TWO = new RegExp(\n  [\n    'creat(?!u)',\n    '[^gq]ua[^auieo]',\n    '[aeiou]{3}',\n    '^(?:ia|mc|coa[dglx].)',\n    '^re(app|es|im|us)',\n    '(th|d)eist'\n  ].join('|'),\n  'g'\n)\n\nconst EXPRESSION_DOUBLE_SYLLABIC_THREE = new RegExp(\n  [\n    '[^aeiou]y[ae]',\n    '[^l]lien',\n    'riet',\n    'dien',\n    'iu',\n    'io',\n    'ii',\n    'uen',\n    '[aeilotu]real',\n    'real[aeilotu]',\n    'iell',\n    'eo[^aeiou]',\n    '[aeiou]y[aeiou]'\n  ].join('|'),\n  'g'\n)\n\nconst EXPRESSION_DOUBLE_SYLLABIC_FOUR = /[^s]ia/\n\n// Expression to match single syllable pre- and suffixes.\nconst EXPRESSION_SINGLE = new RegExp(\n  [\n    '^(?:' +\n      [\n        'un',\n        'fore',\n        'ware',\n        'none?',\n        'out',\n        'post',\n        'sub',\n        'pre',\n        'pro',\n        'dis',\n        'side',\n        'some'\n      ].join('|') +\n      ')',\n    '(?:' +\n      [\n        'ly',\n        'less',\n        'some',\n        'ful',\n        'ers?',\n        'ness',\n        'cians?',\n        'ments?',\n        'ettes?',\n        'villes?',\n        'ships?',\n        'sides?',\n        'ports?',\n        'shires?',\n        '[gnst]ion(?:ed|s)?'\n      ].join('|') +\n      ')$'\n  ].join('|'),\n  'g'\n)\n\n// Expression to match double syllable pre- and suffixes.\nconst EXPRESSION_DOUBLE = new RegExp(\n  [\n    '^' +\n      '(?:' +\n      [\n        'above',\n        'anti',\n        'ante',\n        'counter',\n        'hyper',\n        'afore',\n        'agri',\n        'infra',\n        'intra',\n        'inter',\n        'over',\n        'semi',\n        'ultra',\n        'under',\n        'extra',\n        'dia',\n        'micro',\n        'mega',\n        'kilo',\n        'pico',\n        'nano',\n        'macro',\n        'somer'\n      ].join('|') +\n      ')',\n    '(?:fully|berry|woman|women|edly|union|((?:[bcdfghjklmnpqrstvwxz])|[aeiou])ye?ing)$'\n  ].join('|'),\n  'g'\n)\n\n// Expression to match triple syllable suffixes.\nconst EXPRESSION_TRIPLE = /(creations?|ology|ologist|onomy|onomist)$/g\n\n/**\n * Count syllables in `value`.\n *\n * @param {string} value\n *   Value to check.\n * @returns {number}\n *   Syllables in `value`.\n */\nexport function syllable(value) {\n  const values = normalize(String(value))\n    .toLowerCase()\n    // Remove apostrophes.\n    .replace(/['’]/g, '')\n    // Split on word boundaries.\n    .split(/\\b/g)\n  let index = -1\n  let sum = 0\n\n  while (++index < values.length) {\n    // Remove non-alphabetic characters from a given value.\n    sum += one(values[index].replace(/[^a-z]/g, ''))\n  }\n\n  return sum\n}\n\n/**\n * Get syllables in a word.\n *\n * @param {string} value\n * @returns {number}\n */\nfunction one(value) {\n  let count = 0\n\n  if (value.length === 0) {\n    return count\n  }\n\n  // Return early when possible.\n  if (value.length < 3) {\n    return 1\n  }\n\n  // If `value` is a hard to count, it might be in `problematic`.\n  if (own.call(problematic, value)) {\n    return problematic[value]\n  }\n\n  // Additionally, the singular word might be in `problematic`.\n  const singular = pluralize(value, 1)\n\n  if (own.call(problematic, singular)) {\n    return problematic[singular]\n  }\n\n  const addOne = returnFactory(1)\n  const subtractOne = returnFactory(-1)\n\n  // Count some prefixes and suffixes, and remove their matched ranges.\n  value = value\n    .replace(EXPRESSION_TRIPLE, countFactory(3))\n    .replace(EXPRESSION_DOUBLE, countFactory(2))\n    .replace(EXPRESSION_SINGLE, countFactory(1))\n\n  // Count multiple consonants.\n  const parts = value.split(/[^aeiouy]+/)\n  let index = -1\n\n  while (++index < parts.length) {\n    if (parts[index] !== '') {\n      count++\n    }\n  }\n\n  // Subtract one for occurrences which should be counted as one (but are\n  // counted as two).\n  value\n    .replace(EXPRESSION_MONOSYLLABIC_ONE, subtractOne)\n    .replace(EXPRESSION_MONOSYLLABIC_TWO, subtractOne)\n\n  // Add one for occurrences which should be counted as two (but are counted as\n  // one).\n  value\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_ONE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_TWO, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_THREE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR, addOne)\n\n  // Make sure at least on is returned.\n  return count || 1\n\n  /**\n   * Define scoped counters, to be used in `String#replace()` calls.\n   * The scoped counter removes the matched value from the input.\n   *\n   * @param {number} addition\n   */\n  function countFactory(addition) {\n    return counter\n    /**\n     * @returns {string}\n     */\n    function counter() {\n      count += addition\n      return ''\n    }\n  }\n\n  /**\n   * This scoped counter does not remove the matched value from the input.\n   *\n   * @param {number} addition\n   */\n  function returnFactory(addition) {\n    return returner\n    /**\n     * @param {string} $0\n     * @returns {string}\n     */\n    function returner($0) {\n      count += addition\n      return $0\n    }\n  }\n}\n", "/** @type {Record<string, number>} */\nexport const problematic = {\n  abalone: 4,\n  abare: 3,\n  abbruzzese: 4,\n  abed: 2,\n  aborigine: 5,\n  abruzzese: 4,\n  acreage: 3,\n  adame: 3,\n  adieu: 2,\n  adobe: 3,\n  anemone: 4,\n  anyone: 3,\n  apache: 3,\n  aphrodite: 4,\n  apostrophe: 4,\n  ariadne: 4,\n  cafe: 2,\n  calliope: 4,\n  catastrophe: 4,\n  chile: 2,\n  chloe: 2,\n  circe: 2,\n  coyote: 3,\n  daphne: 2,\n  epitome: 4,\n  eurydice: 4,\n  euterpe: 3,\n  every: 2,\n  everywhere: 3,\n  forever: 3,\n  gethsemane: 4,\n  guacamole: 4,\n  hermione: 4,\n  hyperbole: 4,\n  jesse: 2,\n  jukebox: 2,\n  karate: 3,\n  machete: 3,\n  maybe: 2,\n  naive: 2,\n  newlywed: 3,\n  penelope: 4,\n  people: 2,\n  persephone: 4,\n  phoebe: 2,\n  pulse: 1,\n  queue: 1,\n  recipe: 3,\n  riverbed: 3,\n  sesame: 3,\n  shoreline: 2,\n  simile: 3,\n  snuffleupagus: 5,\n  sometimes: 2,\n  syncope: 3,\n  tamale: 3,\n  waterbed: 3,\n  wednesday: 2,\n  yosemite: 4,\n  zoe: 2\n}\n", "import { syllable } from 'syllable';\nimport pluralize from 'pluralize';\nconst punctuationRE = /[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,\\-./:;<=>?@[\\]^_`{|}~]/g\nimport easyWords from './easy_words.js';\nconst easyWordSet = new Set(easyWords)\n\n// extends Math object\nMath.copySign = (x, y) => {\n  return x * (y / Math.abs(y))\n}\nMath.legacyRound = (number, points = 0) => {\n  const p = 10 ** points\n  // return float(math.floor((number * p) + math.copysign(0.5, number))) / p\n  return Math.floor((number * p) + Math.copySign(0.5, number)) / p\n}\n\nclass Readability {\n  static getGradeSuffix (grade) {\n    grade = Math.floor(grade)\n    // poor function fix this, gives { 22th and 23th grade }\n    const gradeMap = {\n      1: 'st',\n      2: 'nd',\n      3: 'rd'\n    }\n    return gradeMap[grade] ? gradeMap[grade] : 'th'\n  }\n  charCount (text, ignoreSpaces = true) {\n    if (ignoreSpaces) text = text.replace(/ /g, '')\n    return text.length\n  }\n  letterCount (text, ignoreSpaces = true) {\n    if (ignoreSpaces) text = text.replace(/ /g, '')\n    return this.removePunctuation(text).length\n  }\n  removePunctuation (text) {\n    text = text.replace(punctuationRE, '')\n    return text\n  }\n  static split (text) {\n    text = text.split(/,| |\\n|\\r/g)\n    text = text.filter(n => n)\n    return text\n  }\n  lexiconCount (text, removePunctuation = true) {\n    if (removePunctuation) text = this.removePunctuation(text)\n    text = text.split(/,| |\\n|\\r/g)\n    text = text.filter(n => n)\n    return text.length\n  }\n  syllableCount (text, lang = 'en-US') {\n    text = text.toLocaleLowerCase(lang)\n    text = this.removePunctuation(text)\n    if (!text) return 0\n    // eventually replace syllable\n    const count = syllable(text)\n    return count //  js lib overs compared to python\n  }\n  sentenceCount (text) {\n    let ignoreCount = 0\n    let sentences = text.split(/ *[.?!]['\")\\]]*[ |\\n](?=[A-Z])/g)\n    for (let sentence of sentences) {\n      if (this.lexiconCount(sentence) <= 2) ignoreCount += 1\n    }\n    const validSentences = sentences.length - ignoreCount\n    return validSentences > 1 ? validSentences : 1\n  }\n  averageSentenceLength (text) {\n    const asl = this.lexiconCount(text) / this.sentenceCount(text)\n    const returnVal = Math.legacyRound(asl, 1)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  averageSyllablePerWord (text) {\n    const syllables = this.syllableCount(text)\n    const words = this.lexiconCount(text)\n    const syllablePerWord = syllables / words\n    const returnVal = Math.legacyRound(syllablePerWord, 1)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  averageCharacterPerWord (text) {\n    const charactersPerWord = this.charCount(text) / this.lexiconCount(text)\n    const returnVal = Math.legacyRound(charactersPerWord, 2)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  averageLetterPerWord (text) {\n    const lettersPerWord = this.letterCount(text) / this.lexiconCount(text)\n    const returnVal = Math.legacyRound(lettersPerWord, 2)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  averageSentencePerWord (text) {\n    const sentencesPerWord = this.sentenceCount(text) / this.lexiconCount(text)\n    const returnVal = Math.legacyRound(sentencesPerWord, 2)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  fleschReadingEase (text) {\n    const sentenceLength = this.averageSentenceLength(text)\n    const syllablesPerWord = this.averageSyllablePerWord(text)\n    const flesch = 206.835 - (1.015 * sentenceLength) - (84.6 * syllablesPerWord)\n    const returnVal = Math.legacyRound(flesch, 2)\n    return returnVal\n  }\n  fleschReadingEaseToGrade (score) {\n    if (score >= 90) return 5\n    else if (score < 90 && score >= 80) return 6\n    else if (score < 80 && score >= 70) return 7\n    else if (score < 70 && score >= 60) return 8.5\n    else if (score < 60 && score >= 50) return 11\n    else if (score < 50 && score >= 40) return 13 // college\n    else if (score < 40 && score >= 30) return 15\n    else return 16\n  }\n  fleschKincaidGrade (text) {\n    const sentenceLength = this.averageSentenceLength(text)\n    const syllablePerWord = this.averageSyllablePerWord(text)\n    const flesch = 0.39 * sentenceLength + 11.8 * syllablePerWord - 15.59\n    const returnVal = Math.legacyRound(flesch, 1)\n    return returnVal\n  }\n  polySyllableCount (text) {\n    let count = 0\n    let wrds\n    for (let word of Readability.split(text)) {\n      wrds = this.syllableCount(word)\n      if (wrds >= 3) count += 1\n    }\n    return count\n  }\n  smogIndex (text) {\n    const sentences = this.sentenceCount(text)\n    if (sentences >= 3) {\n      const polySyllab = this.polySyllableCount(text)\n      const smog = 1.043 * (30 * (polySyllab / sentences)) ** 0.5 + 3.1291\n      const returnVal = Math.legacyRound(smog, 1)\n      return !isNaN(returnVal) ? returnVal : 0.0\n    }\n    return 0.0\n  }\n  colemanLiauIndex (text) {\n    const letters = Math.legacyRound(this.averageLetterPerWord(text) * 100, 2)\n    const sentences = Math.legacyRound(this.averageSentencePerWord(text) * 100, 2)\n    const coleman = 0.058 * letters - 0.296 * sentences - 15.8\n    return Math.legacyRound(coleman, 2)\n  }\n  automatedReadabilityIndex (text) {\n    const characters = this.charCount(text)\n    const words = this.lexiconCount(text)\n    const sentences = this.sentenceCount(text)\n\n    const averageCharacterPerWord = characters / words\n    const averageWordPerSentence = words / sentences\n    const readability = (\n      (4.71 * Math.legacyRound(averageCharacterPerWord, 2)) +\n      (0.5 * Math.legacyRound(averageWordPerSentence, 2)) -\n      21.43\n    )\n    const returnVal = Math.legacyRound(readability, 1)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  linsearWriteFormula (text) {\n    let easyWord = 0\n    let difficultWord = 0\n    let textList = Readability.split(text).slice(0, 100)\n\n    for (let word of textList) {\n      if (this.syllableCount(word) < 3) {\n        easyWord += 1\n      } else {\n        difficultWord += 1\n      }\n    }\n    text = textList.join(' ')\n    let number = (easyWord * 1 + difficultWord * 3) / this.sentenceCount(text)\n    let returnVal = number <= 20 ? (number - 2) / 2 : number / 2\n    returnVal = Math.legacyRound(returnVal, 1)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  presentTense(word) {\n    // good enough for most long words -- we only care about \"difficult\" words\n    // of two or more syllables anyway.\n    // Doesn't work for words ending in \"e\" that aren't \"easy\"\n    if (word.length < 6)\n      return word\n    if (word.endsWith('ed')) {\n      if (easyWordSet.has(word.slice(0, -1)))\n        return word.slice(0, -1) // \"easy\" word ending in e\n      else\n        return word.slice(0, -2) // assume we remove \"ed\"\n    }\n    if (word.endsWith('ing')) {\n      const suffixIngToE = word.slice(0, -3) + \"e\" // e.g. forcing -> force\n      if (easyWordSet.has(suffixIngToE))\n        return suffixIngToE\n      else\n        return word.slice(0, -3)\n    }\n    return word\n  }\n  difficultWords (text, syllableThreshold) {\n    return [...this.difficultWordsSet(text, syllableThreshold)].length\n  }\n  difficultWordsSet (text, syllableThreshold = 2) {\n    const textList = text.match(/[\\w=‘’]+/g)\n    const diffWordsSet = new Set()\n    if (textList === null)\n      return diffWordsSet\n    for (let word of textList) {\n      const normalized = this.presentTense(pluralize(word.toLocaleLowerCase(), 1))\n      // console.log(`difficultWords(${word}): norm=${normalized}, `\n      //             `${this.syllableCount(word)} syllables, easy? ${easyWordSet.has(normalized)}`)\n      if (!easyWordSet.has(normalized) && this.syllableCount(word) >= syllableThreshold) {\n        diffWordsSet.add(word)\n      }\n    }\n    return diffWordsSet\n  }\n  daleChallReadabilityScore (text) {\n    const wordCount = this.lexiconCount(text)\n    const count = wordCount - this.difficultWords(text)\n    const per = (count / wordCount * 100)\n    if (isNaN(per)) return 0.0\n    const difficultWords = 100 - per\n    // console.log('difficult words : ', difficultWords)\n    let score = (0.1579 * difficultWords) + (0.0496 * this.averageSentenceLength(text))\n    if (difficultWords > 5) score += 3.6365\n    return Math.legacyRound(score, 2)\n  }\n  daleChallToGrade (score) {\n    if (score <= 4.9) return 4\n    if (score < 5.9) return 5\n    if (score < 6.9) return 7\n    if (score < 7.9) return 9\n    if (score < 8.9) return 11\n    if (score < 9.9) return 13\n    else return 16\n  }\n  gunningFog (text) {\n    const perDiffWords = (this.difficultWords(text, 3) / this.lexiconCount(text) * 100)\n    const grade = 0.4 * (this.averageSentenceLength(text) + perDiffWords)\n    const returnVal = Math.legacyRound(grade, 2)\n    return !isNaN(returnVal) ? returnVal : 0.0\n  }\n  lix (text) {\n    const words = Readability.split(text)\n    const wordsLen = words.length\n    const longWords = words.filter(wrd => wrd.length > 6).length\n    const perLongWords = longWords * 100 / wordsLen\n    const asl = this.averageSentenceLength(text)\n    const lix = asl + perLongWords\n    return Math.legacyRound(lix, 2)\n  }\n  rix (text) {\n    const words = Readability.split(text)\n    const longWordsCount = words.filter(wrd => wrd.length > 6).length\n    const sentencesCount = this.sentenceCount(text)\n    const rix = longWordsCount / sentencesCount\n    return !isNaN(rix) ? Math.legacyRound(rix, 2) : 0.0\n  }\n  textStandard (text, floatOutput = null) {\n    const grade = []\n    // Appending Flesch Kincaid Grade\n    let lower = Math.legacyRound(this.fleschKincaidGrade(text))\n    let upper = Math.ceil(this.fleschKincaidGrade(text))\n    grade.push(Math.floor(lower))\n    grade.push(Math.floor(upper))\n\n    let score = this.fleschReadingEase(text)\n    let freGrade = this.fleschReadingEaseToGrade(score)\n    grade.push(freGrade)\n\n    // console.log('grade till now: \\n', grade)\n\n    lower = Math.legacyRound(this.smogIndex(text))\n    upper = Math.ceil(this.smogIndex(text))\n    grade.push(Math.floor(lower))\n    grade.push(Math.floor(upper))\n\n    // Appending Coleman_Liau_Index\n    lower = Math.legacyRound(this.colemanLiauIndex(text))\n    upper = Math.ceil(this.colemanLiauIndex(text))\n    grade.push(Math.floor(lower))\n    grade.push(Math.floor(upper))\n\n    // Appending Automated_Readability_Index\n    lower = Math.legacyRound(this.automatedReadabilityIndex(text))\n    upper = Math.ceil(this.automatedReadabilityIndex(text))\n    grade.push(Math.floor(lower))\n    grade.push(Math.floor(upper))\n\n    // console.log('grade till now : 2 : \\n', grade)\n\n    // Appending  Dale_Chall_Readability_Score\n    lower = Math.legacyRound(this.daleChallToGrade(this.daleChallReadabilityScore(text)))\n    upper = Math.ceil(this.daleChallToGrade(this.daleChallReadabilityScore(text)))\n    grade.push(Math.floor(lower))\n    grade.push(Math.floor(upper))\n\n    // Appending linsearWriteFormula\n    lower = Math.legacyRound(this.linsearWriteFormula(text))\n    upper = Math.ceil(this.linsearWriteFormula(text))\n    grade.push(Math.floor(lower))\n    grade.push(Math.floor(upper))\n\n    // Appending Gunning Fog Index\n    lower = Math.legacyRound(this.gunningFog(text))\n    upper = Math.ceil(this.gunningFog(text))\n    grade.push(Math.floor(lower))\n    grade.push(Math.floor(upper))\n\n    // d = Counter(grade)\n    // final_grade = d.most_common(1)\n    // score = final_grade[0][0]\n\n    // if float_output:\n    //     return float(score)\n    // else:\n    //     lower_score = int(score) - 1\n    //     upper_score = lower_score + 1\n    //     return \"{}{} and {}{} grade\".format(\n    //         lower_score, get_grade_suffix(lower_score),\n    //         upper_score, get_grade_suffix(upper_score)\n    //     )\n    // Finding the Readability Consensus based upon all the above tests\n    // console.log('grade List: ', grade)\n    const counterMap = [...new Set(grade)].map(x => [x, grade.filter(y => y === x).length])\n    const finalGrade = counterMap.reduce((x, y) => y[1] >= x[1] ? y : x)\n    score = finalGrade[0]\n    if (floatOutput) return score\n    const lowerScore = Math.floor(score) - 1\n    const upperScore = lowerScore + 1\n    return `${lowerScore}${Readability.getGradeSuffix(lowerScore)} and ${upperScore}${Readability.getGradeSuffix(upperScore)} grade`\n  }\n  textMedian (text) {\n    const grade = []\n    // Appending Flesch Kincaid Grade\n    grade.push(this.fleschKincaidGrade(text))\n\n    const score = this.fleschReadingEase(text)\n    const freGrade = this.fleschReadingEaseToGrade(score)\n    grade.push(freGrade)\n\n    grade.push(this.smogIndex(text))\n\n    // Appending Coleman_Liau_Index\n    grade.push(this.colemanLiauIndex(text))\n\n    // Appending Automated_Readability_Index\n    grade.push(this.automatedReadabilityIndex(text))\n\n    // Appending  Dale_Chall_Readability_Score\n    grade.push(this.daleChallToGrade(this.daleChallReadabilityScore(text)))\n\n    // Appending linsearWriteFormula\n    grade.push(this.linsearWriteFormula(text))\n\n    // Appending Gunning Fog Index\n    grade.push(this.gunningFog(text))\n\n    // compute median\n    grade.sort(function(a, b) { return a - b })\n    let half = Math.floor(grade.length / 2)\n    if (half & 0x1)\n      return (grade[half-1] + grade[half])/2\n    else\n      return grade[half]\n  }\n}\nconst readability = new Readability()\nexport default readability;\n", "const easyWords = [\r\n  \"a\",\r\n  \"able\",\r\n  \"aboard\",\r\n  \"about\",\r\n  \"above\",\r\n  \"absent\",\r\n  \"accept\",\r\n  \"accident\",\r\n  \"account\",\r\n  \"ache\",\r\n  \"aching\",\r\n  \"acorn\",\r\n  \"acre\",\r\n  \"across\",\r\n  \"act\",\r\n  \"acts\",\r\n  \"add\",\r\n  \"address\",\r\n  \"admire\",\r\n  \"adventure\",\r\n  \"afar\",\r\n  \"afraid\",\r\n  \"after\",\r\n  \"afternoon\",\r\n  \"afterward\",\r\n  \"afterwards\",\r\n  \"again\",\r\n  \"against\",\r\n  \"age\",\r\n  \"aged\",\r\n  \"ago\",\r\n  \"agree\",\r\n  \"ah\",\r\n  \"ahead\",\r\n  \"aid\",\r\n  \"aim\",\r\n  \"air\",\r\n  \"airfield\",\r\n  \"airplane\",\r\n  \"airport\",\r\n  \"airship\",\r\n  \"airy\",\r\n  \"alarm\",\r\n  \"alike\",\r\n  \"alive\",\r\n  \"all\",\r\n  \"alley\",\r\n  \"alligator\",\r\n  \"allow\",\r\n  \"almost\",\r\n  \"alone\",\r\n  \"along\",\r\n  \"aloud\",\r\n  \"already\",\r\n  \"also\",\r\n  \"always\",\r\n  \"am\",\r\n  \"america\",\r\n  \"american\",\r\n  \"among\",\r\n  \"amount\",\r\n  \"an\",\r\n  \"and\",\r\n  \"angel\",\r\n  \"anger\",\r\n  \"angry\",\r\n  \"animal\",\r\n  \"another\",\r\n  \"answer\",\r\n  \"ant\",\r\n  \"any\",\r\n  \"anybody\",\r\n  \"anyhow\",\r\n  \"anyone\",\r\n  \"anything\",\r\n  \"anyway\",\r\n  \"anywhere\",\r\n  \"apart\",\r\n  \"apartment\",\r\n  \"ape\",\r\n  \"apiece\",\r\n  \"appear\",\r\n  \"apple\",\r\n  \"april\",\r\n  \"apron\",\r\n  \"are\",\r\n  \"aren't\",\r\n  \"arise\",\r\n  \"arithmetic\",\r\n  \"arm\",\r\n  \"armful\",\r\n  \"army\",\r\n  \"arose\",\r\n  \"around\",\r\n  \"arrange\",\r\n  \"arrive\",\r\n  \"arrived\",\r\n  \"arrow\",\r\n  \"art\",\r\n  \"artist\",\r\n  \"as\",\r\n  \"ash\",\r\n  \"ashes\",\r\n  \"aside\",\r\n  \"ask\",\r\n  \"asleep\",\r\n  \"at\",\r\n  \"ate\",\r\n  \"attack\",\r\n  \"attend\",\r\n  \"attention\",\r\n  \"august\",\r\n  \"aunt\",\r\n  \"author\",\r\n  \"auto\",\r\n  \"automobile\",\r\n  \"autumn\",\r\n  \"avenue\",\r\n  \"awake\",\r\n  \"awaken\",\r\n  \"away\",\r\n  \"awful\",\r\n  \"awfully\",\r\n  \"awhile\",\r\n  \"ax\",\r\n  \"axe\",\r\n  \"baa\",\r\n  \"babe\",\r\n  \"babies\",\r\n  \"back\",\r\n  \"background\",\r\n  \"backward\",\r\n  \"backwards\",\r\n  \"bacon\",\r\n  \"bad\",\r\n  \"badge\",\r\n  \"badly\",\r\n  \"bag\",\r\n  \"bake\",\r\n  \"baker\",\r\n  \"bakery\",\r\n  \"baking\",\r\n  \"ball\",\r\n  \"balloon\",\r\n  \"banana\",\r\n  \"band\",\r\n  \"bandage\",\r\n  \"bang\",\r\n  \"banjo\",\r\n  \"bank\",\r\n  \"banker\",\r\n  \"bar\",\r\n  \"barber\",\r\n  \"bare\",\r\n  \"barefoot\",\r\n  \"barely\",\r\n  \"bark\",\r\n  \"barn\",\r\n  \"barrel\",\r\n  \"base\",\r\n  \"baseball\",\r\n  \"basement\",\r\n  \"basket\",\r\n  \"bat\",\r\n  \"batch\",\r\n  \"bath\",\r\n  \"bathe\",\r\n  \"bathing\",\r\n  \"bathroom\",\r\n  \"bathtub\",\r\n  \"battle\",\r\n  \"battleship\",\r\n  \"bay\",\r\n  \"be\",\r\n  \"beach\",\r\n  \"bead\",\r\n  \"beam\",\r\n  \"bean\",\r\n  \"bear\",\r\n  \"beard\",\r\n  \"beast\",\r\n  \"beat\",\r\n  \"beating\",\r\n  \"beautiful\",\r\n  \"beautify\",\r\n  \"beauty\",\r\n  \"became\",\r\n  \"because\",\r\n  \"become\",\r\n  \"becoming\",\r\n  \"bed\",\r\n  \"bedbug\",\r\n  \"bedroom\",\r\n  \"bedspread\",\r\n  \"bedtime\",\r\n  \"bee\",\r\n  \"beech\",\r\n  \"beef\",\r\n  \"beefsteak\",\r\n  \"beehive\",\r\n  \"been\",\r\n  \"beer\",\r\n  \"beet\",\r\n  \"before\",\r\n  \"beg\",\r\n  \"began\",\r\n  \"beggar\",\r\n  \"begged\",\r\n  \"begin\",\r\n  \"beginning\",\r\n  \"begun\",\r\n  \"behave\",\r\n  \"behind\",\r\n  \"being\",\r\n  \"believe\",\r\n  \"bell\",\r\n  \"belong\",\r\n  \"below\",\r\n  \"belt\",\r\n  \"bench\",\r\n  \"bend\",\r\n  \"beneath\",\r\n  \"bent\",\r\n  \"berries\",\r\n  \"berry\",\r\n  \"beside\",\r\n  \"besides\",\r\n  \"best\",\r\n  \"bet\",\r\n  \"better\",\r\n  \"between\",\r\n  \"bib\",\r\n  \"bible\",\r\n  \"bicycle\",\r\n  \"bid\",\r\n  \"big\",\r\n  \"bigger\",\r\n  \"bill\",\r\n  \"billboard\",\r\n  \"bin\",\r\n  \"bind\",\r\n  \"bird\",\r\n  \"birth\",\r\n  \"birthday\",\r\n  \"biscuit\",\r\n  \"bit\",\r\n  \"bite\",\r\n  \"biting\",\r\n  \"bitter\",\r\n  \"black\",\r\n  \"blackberry\",\r\n  \"blackbird\",\r\n  \"blackboard\",\r\n  \"blackness\",\r\n  \"blacksmith\",\r\n  \"blame\",\r\n  \"blank\",\r\n  \"blanket\",\r\n  \"blast\",\r\n  \"blaze\",\r\n  \"bleed\",\r\n  \"bless\",\r\n  \"blessing\",\r\n  \"blew\",\r\n  \"blind\",\r\n  \"blindfold\",\r\n  \"blinds\",\r\n  \"block\",\r\n  \"blood\",\r\n  \"bloom\",\r\n  \"blossom\",\r\n  \"blot\",\r\n  \"blow\",\r\n  \"blue\",\r\n  \"blueberry\",\r\n  \"bluebird\",\r\n  \"blush\",\r\n  \"board\",\r\n  \"boast\",\r\n  \"boat\",\r\n  \"bob\",\r\n  \"bobwhite\",\r\n  \"bodies\",\r\n  \"body\",\r\n  \"boil\",\r\n  \"boiler\",\r\n  \"bold\",\r\n  \"bone\",\r\n  \"bonnet\",\r\n  \"boo\",\r\n  \"book\",\r\n  \"bookcase\",\r\n  \"bookkeeper\",\r\n  \"boom\",\r\n  \"boot\",\r\n  \"born\",\r\n  \"borrow\",\r\n  \"boss\",\r\n  \"both\",\r\n  \"bother\",\r\n  \"bottle\",\r\n  \"bottom\",\r\n  \"bought\",\r\n  \"bounce\",\r\n  \"bow\",\r\n  \"bowl\",\r\n  \"bow-wow\",\r\n  \"box\",\r\n  \"boxcar\",\r\n  \"boxer\",\r\n  \"boxes\",\r\n  \"boy\",\r\n  \"boyhood\",\r\n  \"bracelet\",\r\n  \"brain\",\r\n  \"brake\",\r\n  \"bran\",\r\n  \"branch\",\r\n  \"brass\",\r\n  \"brave\",\r\n  \"bread\",\r\n  \"break\",\r\n  \"breakfast\",\r\n  \"breast\",\r\n  \"breath\",\r\n  \"breathe\",\r\n  \"breeze\",\r\n  \"brick\",\r\n  \"bride\",\r\n  \"bridge\",\r\n  \"bright\",\r\n  \"brightness\",\r\n  \"bring\",\r\n  \"broad\",\r\n  \"broadcast\",\r\n  \"broke\",\r\n  \"broken\",\r\n  \"brook\",\r\n  \"broom\",\r\n  \"brother\",\r\n  \"brought\",\r\n  \"brown\",\r\n  \"brush\",\r\n  \"bubble\",\r\n  \"bucket\",\r\n  \"buckle\",\r\n  \"bud\",\r\n  \"buffalo\",\r\n  \"bug\",\r\n  \"buggy\",\r\n  \"build\",\r\n  \"building\",\r\n  \"built\",\r\n  \"bulb\",\r\n  \"bull\",\r\n  \"bullet\",\r\n  \"bum\",\r\n  \"bumblebee\",\r\n  \"bump\",\r\n  \"bun\",\r\n  \"bunch\",\r\n  \"bundle\",\r\n  \"bunny\",\r\n  \"burn\",\r\n  \"burst\",\r\n  \"bury\",\r\n  \"bus\",\r\n  \"bush\",\r\n  \"bushel\",\r\n  \"business\",\r\n  \"busy\",\r\n  \"but\",\r\n  \"butcher\",\r\n  \"butt\",\r\n  \"butter\",\r\n  \"buttercup\",\r\n  \"butterfly\",\r\n  \"buttermilk\",\r\n  \"butterscotch\",\r\n  \"button\",\r\n  \"buttonhole\",\r\n  \"buy\",\r\n  \"buzz\",\r\n  \"by\",\r\n  \"bye\",\r\n  \"cab\",\r\n  \"cabbage\",\r\n  \"cabin\",\r\n  \"cabinet\",\r\n  \"cackle\",\r\n  \"cage\",\r\n  \"cake\",\r\n  \"calendar\",\r\n  \"calf\",\r\n  \"call\",\r\n  \"caller\",\r\n  \"calling\",\r\n  \"came\",\r\n  \"camel\",\r\n  \"camp\",\r\n  \"campfire\",\r\n  \"can\",\r\n  \"canal\",\r\n  \"canary\",\r\n  \"candle\",\r\n  \"candlestick\",\r\n  \"candy\",\r\n  \"cane\",\r\n  \"cannon\",\r\n  \"cannot\",\r\n  \"canoe\",\r\n  \"can't\",\r\n  \"canyon\",\r\n  \"cap\",\r\n  \"cape\",\r\n  \"capital\",\r\n  \"captain\",\r\n  \"car\",\r\n  \"card\",\r\n  \"cardboard\",\r\n  \"care\",\r\n  \"careful\",\r\n  \"careless\",\r\n  \"carelessness\",\r\n  \"carload\",\r\n  \"carpenter\",\r\n  \"carpet\",\r\n  \"carriage\",\r\n  \"carrot\",\r\n  \"carry\",\r\n  \"cart\",\r\n  \"carve\",\r\n  \"case\",\r\n  \"cash\",\r\n  \"cashier\",\r\n  \"castle\",\r\n  \"cat\",\r\n  \"catbird\",\r\n  \"catch\",\r\n  \"catcher\",\r\n  \"caterpillar\",\r\n  \"catfish\",\r\n  \"catsup\",\r\n  \"cattle\",\r\n  \"caught\",\r\n  \"cause\",\r\n  \"cave\",\r\n  \"ceiling\",\r\n  \"cell\",\r\n  \"cellar\",\r\n  \"cent\",\r\n  \"center\",\r\n  \"cereal\",\r\n  \"certain\",\r\n  \"certainly\",\r\n  \"chain\",\r\n  \"chair\",\r\n  \"chalk\",\r\n  \"champion\",\r\n  \"chance\",\r\n  \"change\",\r\n  \"chap\",\r\n  \"charge\",\r\n  \"charm\",\r\n  \"chart\",\r\n  \"chase\",\r\n  \"chatter\",\r\n  \"cheap\",\r\n  \"cheat\",\r\n  \"check\",\r\n  \"checkers\",\r\n  \"cheek\",\r\n  \"cheer\",\r\n  \"cheese\",\r\n  \"cherry\",\r\n  \"chest\",\r\n  \"chew\",\r\n  \"chick\",\r\n  \"chicken\",\r\n  \"chief\",\r\n  \"child\",\r\n  \"childhood\",\r\n  \"children\",\r\n  \"chill\",\r\n  \"chilly\",\r\n  \"chimney\",\r\n  \"chin\",\r\n  \"china\",\r\n  \"chip\",\r\n  \"chipmunk\",\r\n  \"chocolate\",\r\n  \"choice\",\r\n  \"choose\",\r\n  \"chop\",\r\n  \"chorus\",\r\n  \"chose\",\r\n  \"chosen\",\r\n  \"christen\",\r\n  \"christmas\",\r\n  \"church\",\r\n  \"churn\",\r\n  \"cigarette\",\r\n  \"circle\",\r\n  \"circus\",\r\n  \"citizen\",\r\n  \"city\",\r\n  \"clang\",\r\n  \"clap\",\r\n  \"class\",\r\n  \"classmate\",\r\n  \"classroom\",\r\n  \"claw\",\r\n  \"clay\",\r\n  \"clean\",\r\n  \"cleaner\",\r\n  \"clear\",\r\n  \"clerk\",\r\n  \"clever\",\r\n  \"click\",\r\n  \"cliff\",\r\n  \"climb\",\r\n  \"clip\",\r\n  \"cloak\",\r\n  \"clock\",\r\n  \"close\",\r\n  \"closet\",\r\n  \"cloth\",\r\n  \"clothes\",\r\n  \"clothing\",\r\n  \"cloud\",\r\n  \"cloudy\",\r\n  \"clover\",\r\n  \"clown\",\r\n  \"club\",\r\n  \"cluck\",\r\n  \"clump\",\r\n  \"coach\",\r\n  \"coal\",\r\n  \"coast\",\r\n  \"coat\",\r\n  \"cob\",\r\n  \"cobbler\",\r\n  \"cocoa\",\r\n  \"coconut\",\r\n  \"cocoon\",\r\n  \"cod\",\r\n  \"codfish\",\r\n  \"coffee\",\r\n  \"coffeepot\",\r\n  \"coin\",\r\n  \"cold\",\r\n  \"collar\",\r\n  \"college\",\r\n  \"color\",\r\n  \"colored\",\r\n  \"colt\",\r\n  \"column\",\r\n  \"comb\",\r\n  \"come\",\r\n  \"comfort\",\r\n  \"comic\",\r\n  \"coming\",\r\n  \"company\",\r\n  \"compare\",\r\n  \"conductor\",\r\n  \"cone\",\r\n  \"connect\",\r\n  \"coo\",\r\n  \"cook\",\r\n  \"cooked\",\r\n  \"cooking\",\r\n  \"cookie\",\r\n  \"cookies\",\r\n  \"cool\",\r\n  \"cooler\",\r\n  \"coop\",\r\n  \"copper\",\r\n  \"copy\",\r\n  \"cord\",\r\n  \"cork\",\r\n  \"corn\",\r\n  \"corner\",\r\n  \"correct\",\r\n  \"cost\",\r\n  \"cot\",\r\n  \"cottage\",\r\n  \"cotton\",\r\n  \"couch\",\r\n  \"cough\",\r\n  \"could\",\r\n  \"couldn't\",\r\n  \"count\",\r\n  \"counter\",\r\n  \"country\",\r\n  \"county\",\r\n  \"course\",\r\n  \"court\",\r\n  \"cousin\",\r\n  \"cover\",\r\n  \"cow\",\r\n  \"coward\",\r\n  \"cowardly\",\r\n  \"cowboy\",\r\n  \"cozy\",\r\n  \"crab\",\r\n  \"crack\",\r\n  \"cracker\",\r\n  \"cradle\",\r\n  \"cramps\",\r\n  \"cranberry\",\r\n  \"crank\",\r\n  \"cranky\",\r\n  \"crash\",\r\n  \"crawl\",\r\n  \"crazy\",\r\n  \"cream\",\r\n  \"creamy\",\r\n  \"creek\",\r\n  \"creep\",\r\n  \"crept\",\r\n  \"cried\",\r\n  \"croak\",\r\n  \"crook\",\r\n  \"crooked\",\r\n  \"crop\",\r\n  \"cross\",\r\n  \"crossing\",\r\n  \"cross-eyed\",\r\n  \"crow\",\r\n  \"crowd\",\r\n  \"crowded\",\r\n  \"crown\",\r\n  \"cruel\",\r\n  \"crumb\",\r\n  \"crumble\",\r\n  \"crush\",\r\n  \"crust\",\r\n  \"cry\",\r\n  \"cries\",\r\n  \"cub\",\r\n  \"cuff\",\r\n  \"cup\",\r\n  \"cuff\",\r\n  \"cup\",\r\n  \"cupboard\",\r\n  \"cupful\",\r\n  \"cure\",\r\n  \"curl\",\r\n  \"curly\",\r\n  \"curtain\",\r\n  \"curve\",\r\n  \"cushion\",\r\n  \"custard\",\r\n  \"customer\",\r\n  \"cut\",\r\n  \"cute\",\r\n  \"cutting\",\r\n  \"dab\",\r\n  \"dad\",\r\n  \"daddy\",\r\n  \"daily\",\r\n  \"dairy\",\r\n  \"daisy\",\r\n  \"dam\",\r\n  \"damage\",\r\n  \"dame\",\r\n  \"damp\",\r\n  \"dance\",\r\n  \"dancer\",\r\n  \"dancing\",\r\n  \"dandy\",\r\n  \"danger\",\r\n  \"dangerous\",\r\n  \"dare\",\r\n  \"dark\",\r\n  \"darkness\",\r\n  \"darling\",\r\n  \"darn\",\r\n  \"dart\",\r\n  \"dash\",\r\n  \"date\",\r\n  \"daughter\",\r\n  \"dawn\",\r\n  \"day\",\r\n  \"daybreak\",\r\n  \"daytime\",\r\n  \"dead\",\r\n  \"deaf\",\r\n  \"deal\",\r\n  \"dear\",\r\n  \"death\",\r\n  \"december\",\r\n  \"decide\",\r\n  \"deck\",\r\n  \"deed\",\r\n  \"deep\",\r\n  \"deer\",\r\n  \"defeat\",\r\n  \"defend\",\r\n  \"defense\",\r\n  \"delight\",\r\n  \"den\",\r\n  \"dentist\",\r\n  \"depend\",\r\n  \"deposit\",\r\n  \"describe\",\r\n  \"desert\",\r\n  \"deserve\",\r\n  \"desire\",\r\n  \"desk\",\r\n  \"destroy\",\r\n  \"devil\",\r\n  \"dew\",\r\n  \"diamond\",\r\n  \"did\",\r\n  \"didn't\",\r\n  \"die\",\r\n  \"died\",\r\n  \"dies\",\r\n  \"difference\",\r\n  \"different\",\r\n  \"dig\",\r\n  \"dim\",\r\n  \"dime\",\r\n  \"dine\",\r\n  \"ding-dong\",\r\n  \"dinner\",\r\n  \"dip\",\r\n  \"direct\",\r\n  \"direction\",\r\n  \"dirt\",\r\n  \"dirty\",\r\n  \"discover\",\r\n  \"dish\",\r\n  \"dislike\",\r\n  \"dismiss\",\r\n  \"ditch\",\r\n  \"dive\",\r\n  \"diver\",\r\n  \"divide\",\r\n  \"do\",\r\n  \"dock\",\r\n  \"doctor\",\r\n  \"does\",\r\n  \"doesn't\",\r\n  \"dog\",\r\n  \"doll\",\r\n  \"dollar\",\r\n  \"dolly\",\r\n  \"done\",\r\n  \"donkey\",\r\n  \"don't\",\r\n  \"door\",\r\n  \"doorbell\",\r\n  \"doorknob\",\r\n  \"doorstep\",\r\n  \"dope\",\r\n  \"dot\",\r\n  \"double\",\r\n  \"dough\",\r\n  \"dove\",\r\n  \"down\",\r\n  \"downstairs\",\r\n  \"downtown\",\r\n  \"dozen\",\r\n  \"drag\",\r\n  \"drain\",\r\n  \"drank\",\r\n  \"draw\",\r\n  \"drawer\",\r\n  \"draw\",\r\n  \"drawing\",\r\n  \"dream\",\r\n  \"dress\",\r\n  \"dresser\",\r\n  \"dressmaker\",\r\n  \"drew\",\r\n  \"dried\",\r\n  \"drift\",\r\n  \"drill\",\r\n  \"drink\",\r\n  \"drip\",\r\n  \"drive\",\r\n  \"driven\",\r\n  \"driver\",\r\n  \"drop\",\r\n  \"drove\",\r\n  \"drown\",\r\n  \"drowsy\",\r\n  \"drub\",\r\n  \"drum\",\r\n  \"drunk\",\r\n  \"dry\",\r\n  \"duck\",\r\n  \"due\",\r\n  \"dug\",\r\n  \"dull\",\r\n  \"dumb\",\r\n  \"dump\",\r\n  \"during\",\r\n  \"dust\",\r\n  \"dusty\",\r\n  \"duty\",\r\n  \"dwarf\",\r\n  \"dwell\",\r\n  \"dwelt\",\r\n  \"dying\",\r\n  \"each\",\r\n  \"eager\",\r\n  \"eagle\",\r\n  \"ear\",\r\n  \"early\",\r\n  \"earn\",\r\n  \"earth\",\r\n  \"east\",\r\n  \"eastern\",\r\n  \"easy\",\r\n  \"eat\",\r\n  \"eaten\",\r\n  \"edge\",\r\n  \"egg\",\r\n  \"eh\",\r\n  \"eight\",\r\n  \"eighteen\",\r\n  \"eighth\",\r\n  \"eighty\",\r\n  \"either\",\r\n  \"elbow\",\r\n  \"elder\",\r\n  \"eldest\",\r\n  \"electric\",\r\n  \"electricity\",\r\n  \"elephant\",\r\n  \"eleven\",\r\n  \"elf\",\r\n  \"elm\",\r\n  \"else\",\r\n  \"elsewhere\",\r\n  \"empty\",\r\n  \"end\",\r\n  \"ending\",\r\n  \"enemy\",\r\n  \"engine\",\r\n  \"engineer\",\r\n  \"english\",\r\n  \"enjoy\",\r\n  \"enough\",\r\n  \"enter\",\r\n  \"envelope\",\r\n  \"equal\",\r\n  \"erase\",\r\n  \"eraser\",\r\n  \"errand\",\r\n  \"escape\",\r\n  \"eve\",\r\n  \"even\",\r\n  \"evening\",\r\n  \"ever\",\r\n  \"every\",\r\n  \"everybody\",\r\n  \"everyday\",\r\n  \"everyone\",\r\n  \"everything\",\r\n  \"everywhere\",\r\n  \"evil\",\r\n  \"exact\",\r\n  \"except\",\r\n  \"exchange\",\r\n  \"excited\",\r\n  \"exciting\",\r\n  \"excuse\",\r\n  \"exit\",\r\n  \"expect\",\r\n  \"explain\",\r\n  \"extra\",\r\n  \"eye\",\r\n  \"eyebrow\",\r\n  \"fable\",\r\n  \"face\",\r\n  \"facing\",\r\n  \"fact\",\r\n  \"factory\",\r\n  \"fail\",\r\n  \"faint\",\r\n  \"fair\",\r\n  \"fairy\",\r\n  \"faith\",\r\n  \"fake\",\r\n  \"fall\",\r\n  \"false\",\r\n  \"family\",\r\n  \"fan\",\r\n  \"fancy\",\r\n  \"far\",\r\n  \"faraway\",\r\n  \"fare\",\r\n  \"farmer\",\r\n  \"farm\",\r\n  \"farming\",\r\n  \"far-off\",\r\n  \"farther\",\r\n  \"fashion\",\r\n  \"fast\",\r\n  \"fasten\",\r\n  \"fat\",\r\n  \"father\",\r\n  \"fault\",\r\n  \"favor\",\r\n  \"favorite\",\r\n  \"fear\",\r\n  \"feast\",\r\n  \"feather\",\r\n  \"february\",\r\n  \"fed\",\r\n  \"feed\",\r\n  \"feel\",\r\n  \"feet\",\r\n  \"fell\",\r\n  \"fellow\",\r\n  \"felt\",\r\n  \"fence\",\r\n  \"fever\",\r\n  \"few\",\r\n  \"fib\",\r\n  \"fiddle\",\r\n  \"field\",\r\n  \"fife\",\r\n  \"fifteen\",\r\n  \"fifth\",\r\n  \"fifty\",\r\n  \"fig\",\r\n  \"fight\",\r\n  \"figure\",\r\n  \"file\",\r\n  \"fill\",\r\n  \"film\",\r\n  \"finally\",\r\n  \"find\",\r\n  \"fine\",\r\n  \"finger\",\r\n  \"finish\",\r\n  \"fire\",\r\n  \"firearm\",\r\n  \"firecracker\",\r\n  \"fireplace\",\r\n  \"fireworks\",\r\n  \"firing\",\r\n  \"first\",\r\n  \"fish\",\r\n  \"fisherman\",\r\n  \"fist\",\r\n  \"fit\",\r\n  \"fits\",\r\n  \"five\",\r\n  \"fix\",\r\n  \"flag\",\r\n  \"flake\",\r\n  \"flame\",\r\n  \"flap\",\r\n  \"flash\",\r\n  \"flashlight\",\r\n  \"flat\",\r\n  \"flea\",\r\n  \"flesh\",\r\n  \"flew\",\r\n  \"flies\",\r\n  \"flight\",\r\n  \"flip\",\r\n  \"flip-flop\",\r\n  \"float\",\r\n  \"flock\",\r\n  \"flood\",\r\n  \"floor\",\r\n  \"flop\",\r\n  \"flour\",\r\n  \"flow\",\r\n  \"flower\",\r\n  \"flowery\",\r\n  \"flutter\",\r\n  \"fly\",\r\n  \"foam\",\r\n  \"fog\",\r\n  \"foggy\",\r\n  \"fold\",\r\n  \"folks\",\r\n  \"follow\",\r\n  \"following\",\r\n  \"fond\",\r\n  \"food\",\r\n  \"fool\",\r\n  \"foolish\",\r\n  \"foot\",\r\n  \"football\",\r\n  \"footprint\",\r\n  \"for\",\r\n  \"forehead\",\r\n  \"forest\",\r\n  \"forget\",\r\n  \"forgive\",\r\n  \"forgot\",\r\n  \"forgotten\",\r\n  \"fork\",\r\n  \"form\",\r\n  \"fort\",\r\n  \"forth\",\r\n  \"fortune\",\r\n  \"forty\",\r\n  \"forward\",\r\n  \"fought\",\r\n  \"found\",\r\n  \"fountain\",\r\n  \"four\",\r\n  \"fourteen\",\r\n  \"fourth\",\r\n  \"fox\",\r\n  \"frame\",\r\n  \"free\",\r\n  \"freedom\",\r\n  \"freeze\",\r\n  \"freight\",\r\n  \"french\",\r\n  \"fresh\",\r\n  \"fret\",\r\n  \"friday\",\r\n  \"fried\",\r\n  \"friend\",\r\n  \"friendly\",\r\n  \"friendship\",\r\n  \"frighten\",\r\n  \"frog\",\r\n  \"from\",\r\n  \"front\",\r\n  \"frost\",\r\n  \"frown\",\r\n  \"froze\",\r\n  \"fruit\",\r\n  \"fry\",\r\n  \"fudge\",\r\n  \"fuel\",\r\n  \"full\",\r\n  \"fully\",\r\n  \"fun\",\r\n  \"funny\",\r\n  \"fur\",\r\n  \"furniture\",\r\n  \"further\",\r\n  \"fuzzy\",\r\n  \"gain\",\r\n  \"gallon\",\r\n  \"gallop\",\r\n  \"game\",\r\n  \"gang\",\r\n  \"garage\",\r\n  \"garbage\",\r\n  \"garden\",\r\n  \"gas\",\r\n  \"gasoline\",\r\n  \"gate\",\r\n  \"gather\",\r\n  \"gave\",\r\n  \"gay\",\r\n  \"gear\",\r\n  \"geese\",\r\n  \"general\",\r\n  \"gentle\",\r\n  \"gentleman\",\r\n  \"gentlemen\",\r\n  \"geography\",\r\n  \"get\",\r\n  \"getting\",\r\n  \"giant\",\r\n  \"gift\",\r\n  \"gingerbread\",\r\n  \"girl\",\r\n  \"give\",\r\n  \"given\",\r\n  \"giving\",\r\n  \"glad\",\r\n  \"gladly\",\r\n  \"glance\",\r\n  \"glass\",\r\n  \"glasses\",\r\n  \"gleam\",\r\n  \"glide\",\r\n  \"glory\",\r\n  \"glove\",\r\n  \"glow\",\r\n  \"glue\",\r\n  \"go\",\r\n  \"going\",\r\n  \"goes\",\r\n  \"goal\",\r\n  \"goat\",\r\n  \"gobble\",\r\n  \"god\",\r\n  \"god\",\r\n  \"godmother\",\r\n  \"gold\",\r\n  \"golden\",\r\n  \"goldfish\",\r\n  \"golf\",\r\n  \"gone\",\r\n  \"good\",\r\n  \"goods\",\r\n  \"goodbye\",\r\n  \"good-by\",\r\n  \"goodbye\",\r\n  \"good-bye\",\r\n  \"good-looking\",\r\n  \"goodness\",\r\n  \"goody\",\r\n  \"goose\",\r\n  \"gooseberry\",\r\n  \"got\",\r\n  \"govern\",\r\n  \"government\",\r\n  \"gown\",\r\n  \"grab\",\r\n  \"gracious\",\r\n  \"grade\",\r\n  \"grain\",\r\n  \"grand\",\r\n  \"grandchild\",\r\n  \"grandchildren\",\r\n  \"granddaughter\",\r\n  \"grandfather\",\r\n  \"grandma\",\r\n  \"grandmother\",\r\n  \"grandpa\",\r\n  \"grandson\",\r\n  \"grandstand\",\r\n  \"grape\",\r\n  \"grapes\",\r\n  \"grapefruit\",\r\n  \"grass\",\r\n  \"grasshopper\",\r\n  \"grateful\",\r\n  \"grave\",\r\n  \"gravel\",\r\n  \"graveyard\",\r\n  \"gravy\",\r\n  \"gray\",\r\n  \"graze\",\r\n  \"grease\",\r\n  \"great\",\r\n  \"green\",\r\n  \"greet\",\r\n  \"grew\",\r\n  \"grind\",\r\n  \"groan\",\r\n  \"grocery\",\r\n  \"ground\",\r\n  \"group\",\r\n  \"grove\",\r\n  \"grow\",\r\n  \"guard\",\r\n  \"guess\",\r\n  \"guest\",\r\n  \"guide\",\r\n  \"gulf\",\r\n  \"gum\",\r\n  \"gun\",\r\n  \"gunpowder\",\r\n  \"guy\",\r\n  \"ha\",\r\n  \"habit\",\r\n  \"had\",\r\n  \"hadn't\",\r\n  \"hail\",\r\n  \"hair\",\r\n  \"haircut\",\r\n  \"hairpin\",\r\n  \"half\",\r\n  \"hall\",\r\n  \"halt\",\r\n  \"ham\",\r\n  \"hammer\",\r\n  \"hand\",\r\n  \"handful\",\r\n  \"handkerchief\",\r\n  \"handle\",\r\n  \"handwriting\",\r\n  \"hang\",\r\n  \"happen\",\r\n  \"happily\",\r\n  \"happiness\",\r\n  \"happy\",\r\n  \"harbor\",\r\n  \"hard\",\r\n  \"hardly\",\r\n  \"hardship\",\r\n  \"hardware\",\r\n  \"hare\",\r\n  \"hark\",\r\n  \"harm\",\r\n  \"harness\",\r\n  \"harp\",\r\n  \"harvest\",\r\n  \"has\",\r\n  \"hasn't\",\r\n  \"haste\",\r\n  \"hasten\",\r\n  \"hasty\",\r\n  \"hat\",\r\n  \"hatch\",\r\n  \"hatchet\",\r\n  \"hate\",\r\n  \"haul\",\r\n  \"have\",\r\n  \"haven't\",\r\n  \"having\",\r\n  \"hawk\",\r\n  \"hay\",\r\n  \"hayfield\",\r\n  \"haystack\",\r\n  \"he\",\r\n  \"head\",\r\n  \"headache\",\r\n  \"heal\",\r\n  \"health\",\r\n  \"healthy\",\r\n  \"heap\",\r\n  \"hear\",\r\n  \"hearing\",\r\n  \"heard\",\r\n  \"heart\",\r\n  \"heat\",\r\n  \"heater\",\r\n  \"heaven\",\r\n  \"heavy\",\r\n  \"he'd\",\r\n  \"heel\",\r\n  \"height\",\r\n  \"held\",\r\n  \"hell\",\r\n  \"he'll\",\r\n  \"hello\",\r\n  \"helmet\",\r\n  \"help\",\r\n  \"helper\",\r\n  \"helpful\",\r\n  \"hem\",\r\n  \"hen\",\r\n  \"henhouse\",\r\n  \"her\",\r\n  \"hers\",\r\n  \"herd\",\r\n  \"here\",\r\n  \"here's\",\r\n  \"hero\",\r\n  \"herself\",\r\n  \"he's\",\r\n  \"hey\",\r\n  \"hickory\",\r\n  \"hid\",\r\n  \"hidden\",\r\n  \"hide\",\r\n  \"high\",\r\n  \"highway\",\r\n  \"hill\",\r\n  \"hillside\",\r\n  \"hilltop\",\r\n  \"hilly\",\r\n  \"him\",\r\n  \"himself\",\r\n  \"hind\",\r\n  \"hint\",\r\n  \"hip\",\r\n  \"hire\",\r\n  \"his\",\r\n  \"hiss\",\r\n  \"history\",\r\n  \"hit\",\r\n  \"hitch\",\r\n  \"hive\",\r\n  \"ho\",\r\n  \"hoe\",\r\n  \"hog\",\r\n  \"hold\",\r\n  \"holder\",\r\n  \"hole\",\r\n  \"holiday\",\r\n  \"hollow\",\r\n  \"holy\",\r\n  \"home\",\r\n  \"homely\",\r\n  \"homesick\",\r\n  \"honest\",\r\n  \"honey\",\r\n  \"honeybee\",\r\n  \"honeymoon\",\r\n  \"honk\",\r\n  \"honor\",\r\n  \"hood\",\r\n  \"hoof\",\r\n  \"hook\",\r\n  \"hoop\",\r\n  \"hop\",\r\n  \"hope\",\r\n  \"hopeful\",\r\n  \"hopeless\",\r\n  \"horn\",\r\n  \"horse\",\r\n  \"horseback\",\r\n  \"horseshoe\",\r\n  \"hose\",\r\n  \"hospital\",\r\n  \"host\",\r\n  \"hot\",\r\n  \"hotel\",\r\n  \"hound\",\r\n  \"hour\",\r\n  \"house\",\r\n  \"housetop\",\r\n  \"housewife\",\r\n  \"housework\",\r\n  \"how\",\r\n  \"however\",\r\n  \"howl\",\r\n  \"hug\",\r\n  \"huge\",\r\n  \"hum\",\r\n  \"humble\",\r\n  \"hump\",\r\n  \"hundred\",\r\n  \"hung\",\r\n  \"hunger\",\r\n  \"hungry\",\r\n  \"hunk\",\r\n  \"hunt\",\r\n  \"hunter\",\r\n  \"hurrah\",\r\n  \"hurried\",\r\n  \"hurry\",\r\n  \"hurt\",\r\n  \"husband\",\r\n  \"hush\",\r\n  \"hut\",\r\n  \"hymn\",\r\n  \"i\",\r\n  \"ice\",\r\n  \"icy\",\r\n  \"i'd\",\r\n  \"idea\",\r\n  \"ideal\",\r\n  \"if\",\r\n  \"ill\",\r\n  \"i'll\",\r\n  \"i'm\",\r\n  \"important\",\r\n  \"impossible\",\r\n  \"improve\",\r\n  \"in\",\r\n  \"inch\",\r\n  \"inches\",\r\n  \"income\",\r\n  \"indeed\",\r\n  \"indian\",\r\n  \"indoors\",\r\n  \"ink\",\r\n  \"inn\",\r\n  \"insect\",\r\n  \"inside\",\r\n  \"instant\",\r\n  \"instead\",\r\n  \"insult\",\r\n  \"intend\",\r\n  \"interested\",\r\n  \"interesting\",\r\n  \"into\",\r\n  \"invite\",\r\n  \"iron\",\r\n  \"is\",\r\n  \"island\",\r\n  \"isn't\",\r\n  \"it\",\r\n  \"its\",\r\n  \"it's\",\r\n  \"itself\",\r\n  \"i've\",\r\n  \"ivory\",\r\n  \"ivy\",\r\n  \"jacket\",\r\n  \"jacks\",\r\n  \"jail\",\r\n  \"jam\",\r\n  \"january\",\r\n  \"jar\",\r\n  \"jaw\",\r\n  \"jay\",\r\n  \"jelly\",\r\n  \"jellyfish\",\r\n  \"jerk\",\r\n  \"jig\",\r\n  \"job\",\r\n  \"jockey\",\r\n  \"join\",\r\n  \"joke\",\r\n  \"joking\",\r\n  \"jolly\",\r\n  \"journey\",\r\n  \"joy\",\r\n  \"joyful\",\r\n  \"joyous\",\r\n  \"judge\",\r\n  \"jug\",\r\n  \"juice\",\r\n  \"juicy\",\r\n  \"july\",\r\n  \"jump\",\r\n  \"june\",\r\n  \"junior\",\r\n  \"junk\",\r\n  \"just\",\r\n  \"keen\",\r\n  \"keep\",\r\n  \"kept\",\r\n  \"kettle\",\r\n  \"key\",\r\n  \"kick\",\r\n  \"kid\",\r\n  \"kill\",\r\n  \"killed\",\r\n  \"kind\",\r\n  \"kindly\",\r\n  \"kindness\",\r\n  \"king\",\r\n  \"kingdom\",\r\n  \"kiss\",\r\n  \"kitchen\",\r\n  \"kite\",\r\n  \"kitten\",\r\n  \"kitty\",\r\n  \"knee\",\r\n  \"kneel\",\r\n  \"knew\",\r\n  \"knife\",\r\n  \"knit\",\r\n  \"knives\",\r\n  \"knob\",\r\n  \"knock\",\r\n  \"knot\",\r\n  \"know\",\r\n  \"known\",\r\n  \"lace\",\r\n  \"lad\",\r\n  \"ladder\",\r\n  \"ladies\",\r\n  \"lady\",\r\n  \"laid\",\r\n  \"lake\",\r\n  \"lamb\",\r\n  \"lame\",\r\n  \"lamp\",\r\n  \"land\",\r\n  \"lane\",\r\n  \"language\",\r\n  \"lantern\",\r\n  \"lap\",\r\n  \"lard\",\r\n  \"large\",\r\n  \"lash\",\r\n  \"lass\",\r\n  \"last\",\r\n  \"late\",\r\n  \"laugh\",\r\n  \"laundry\",\r\n  \"law\",\r\n  \"lawn\",\r\n  \"lawyer\",\r\n  \"lay\",\r\n  \"lazy\",\r\n  \"lead\",\r\n  \"leader\",\r\n  \"leaf\",\r\n  \"leak\",\r\n  \"lean\",\r\n  \"leap\",\r\n  \"learn\",\r\n  \"learned\",\r\n  \"least\",\r\n  \"leather\",\r\n  \"leave\",\r\n  \"leaving\",\r\n  \"led\",\r\n  \"left\",\r\n  \"leg\",\r\n  \"lemon\",\r\n  \"lemonade\",\r\n  \"lend\",\r\n  \"length\",\r\n  \"less\",\r\n  \"lesson\",\r\n  \"let\",\r\n  \"let's\",\r\n  \"letter\",\r\n  \"letting\",\r\n  \"lettuce\",\r\n  \"level\",\r\n  \"liberty\",\r\n  \"library\",\r\n  \"lice\",\r\n  \"lick\",\r\n  \"lid\",\r\n  \"lie\",\r\n  \"life\",\r\n  \"lift\",\r\n  \"light\",\r\n  \"lightness\",\r\n  \"lightning\",\r\n  \"like\",\r\n  \"likely\",\r\n  \"liking\",\r\n  \"lily\",\r\n  \"limb\",\r\n  \"lime\",\r\n  \"limp\",\r\n  \"line\",\r\n  \"linen\",\r\n  \"lion\",\r\n  \"lip\",\r\n  \"list\",\r\n  \"listen\",\r\n  \"lit\",\r\n  \"little\",\r\n  \"live\",\r\n  \"lives\",\r\n  \"lively\",\r\n  \"liver\",\r\n  \"living\",\r\n  \"lizard\",\r\n  \"load\",\r\n  \"loaf\",\r\n  \"loan\",\r\n  \"loaves\",\r\n  \"lock\",\r\n  \"locomotive\",\r\n  \"log\",\r\n  \"lone\",\r\n  \"lonely\",\r\n  \"lonesome\",\r\n  \"long\",\r\n  \"look\",\r\n  \"lookout\",\r\n  \"loop\",\r\n  \"loose\",\r\n  \"lord\",\r\n  \"lose\",\r\n  \"loser\",\r\n  \"loss\",\r\n  \"lost\",\r\n  \"lot\",\r\n  \"loud\",\r\n  \"love\",\r\n  \"lovely\",\r\n  \"lover\",\r\n  \"low\",\r\n  \"luck\",\r\n  \"lucky\",\r\n  \"lumber\",\r\n  \"lump\",\r\n  \"lunch\",\r\n  \"lying\",\r\n  \"machine\",\r\n  \"machinery\",\r\n  \"mad\",\r\n  \"made\",\r\n  \"magazine\",\r\n  \"magic\",\r\n  \"maid\",\r\n  \"mail\",\r\n  \"mailbox\",\r\n  \"mailman\",\r\n  \"major\",\r\n  \"make\",\r\n  \"making\",\r\n  \"male\",\r\n  \"mama\",\r\n  \"mamma\",\r\n  \"man\",\r\n  \"manager\",\r\n  \"mane\",\r\n  \"manger\",\r\n  \"many\",\r\n  \"map\",\r\n  \"maple\",\r\n  \"marble\",\r\n  \"march\",\r\n  \"march\",\r\n  \"mare\",\r\n  \"mark\",\r\n  \"market\",\r\n  \"marriage\",\r\n  \"married\",\r\n  \"marry\",\r\n  \"mask\",\r\n  \"mast\",\r\n  \"master\",\r\n  \"mat\",\r\n  \"match\",\r\n  \"matter\",\r\n  \"mattress\",\r\n  \"may\",\r\n  \"may\",\r\n  \"maybe\",\r\n  \"mayor\",\r\n  \"maypole\",\r\n  \"me\",\r\n  \"meadow\",\r\n  \"meal\",\r\n  \"mean\",\r\n  \"means\",\r\n  \"meant\",\r\n  \"measure\",\r\n  \"meat\",\r\n  \"medicine\",\r\n  \"meet\",\r\n  \"meeting\",\r\n  \"melt\",\r\n  \"member\",\r\n  \"men\",\r\n  \"mend\",\r\n  \"meow\",\r\n  \"merry\",\r\n  \"mess\",\r\n  \"message\",\r\n  \"met\",\r\n  \"metal\",\r\n  \"mew\",\r\n  \"mice\",\r\n  \"middle\",\r\n  \"midnight\",\r\n  \"might\",\r\n  \"mighty\",\r\n  \"mile\",\r\n  \"milk\",\r\n  \"milkman\",\r\n  \"mill\",\r\n  \"miler\",\r\n  \"million\",\r\n  \"mind\",\r\n  \"mine\",\r\n  \"miner\",\r\n  \"mint\",\r\n  \"minute\",\r\n  \"mirror\",\r\n  \"mischief\",\r\n  \"miss\",\r\n  \"miss\",\r\n  \"misspell\",\r\n  \"mistake\",\r\n  \"misty\",\r\n  \"mitt\",\r\n  \"mitten\",\r\n  \"mix\",\r\n  \"moment\",\r\n  \"monday\",\r\n  \"money\",\r\n  \"monkey\",\r\n  \"month\",\r\n  \"moo\",\r\n  \"moon\",\r\n  \"moonlight\",\r\n  \"moose\",\r\n  \"mop\",\r\n  \"more\",\r\n  \"morning\",\r\n  \"morrow\",\r\n  \"moss\",\r\n  \"most\",\r\n  \"mostly\",\r\n  \"mother\",\r\n  \"motor\",\r\n  \"mount\",\r\n  \"mountain\",\r\n  \"mouse\",\r\n  \"mouth\",\r\n  \"move\",\r\n  \"movie\",\r\n  \"movies\",\r\n  \"moving\",\r\n  \"mow\",\r\n  \"mr.\",\r\n  \"mrs.\",\r\n  \"much\",\r\n  \"mud\",\r\n  \"muddy\",\r\n  \"mug\",\r\n  \"mule\",\r\n  \"multiply\",\r\n  \"murder\",\r\n  \"music\",\r\n  \"must\",\r\n  \"my\",\r\n  \"myself\",\r\n  \"nail\",\r\n  \"name\",\r\n  \"nap\",\r\n  \"napkin\",\r\n  \"narrow\",\r\n  \"nasty\",\r\n  \"naughty\",\r\n  \"navy\",\r\n  \"near\",\r\n  \"nearby\",\r\n  \"nearly\",\r\n  \"neat\",\r\n  \"neck\",\r\n  \"necktie\",\r\n  \"need\",\r\n  \"needle\",\r\n  \"needn't\",\r\n  \"negro\",\r\n  \"neighbor\",\r\n  \"neighborhood\",\r\n  \"neither\",\r\n  \"nerve\",\r\n  \"nest\",\r\n  \"net\",\r\n  \"never\",\r\n  \"nevermore\",\r\n  \"new\",\r\n  \"news\",\r\n  \"newspaper\",\r\n  \"next\",\r\n  \"nibble\",\r\n  \"nice\",\r\n  \"nickel\",\r\n  \"night\",\r\n  \"nightgown\",\r\n  \"nine\",\r\n  \"nineteen\",\r\n  \"ninety\",\r\n  \"no\",\r\n  \"nobody\",\r\n  \"nod\",\r\n  \"noise\",\r\n  \"noisy\",\r\n  \"none\",\r\n  \"noon\",\r\n  \"nor\",\r\n  \"north\",\r\n  \"northern\",\r\n  \"nose\",\r\n  \"not\",\r\n  \"note\",\r\n  \"nothing\",\r\n  \"notice\",\r\n  \"november\",\r\n  \"now\",\r\n  \"nowhere\",\r\n  \"number\",\r\n  \"nurse\",\r\n  \"nut\",\r\n  \"oak\",\r\n  \"oar\",\r\n  \"oatmeal\",\r\n  \"oats\",\r\n  \"obey\",\r\n  \"ocean\",\r\n  \"o'clock\",\r\n  \"october\",\r\n  \"odd\",\r\n  \"of\",\r\n  \"off\",\r\n  \"offer\",\r\n  \"office\",\r\n  \"officer\",\r\n  \"often\",\r\n  \"oh\",\r\n  \"oil\",\r\n  \"old\",\r\n  \"old-fashioned\",\r\n  \"on\",\r\n  \"once\",\r\n  \"one\",\r\n  \"onion\",\r\n  \"only\",\r\n  \"onward\",\r\n  \"open\",\r\n  \"or\",\r\n  \"orange\",\r\n  \"orchard\",\r\n  \"order\",\r\n  \"ore\",\r\n  \"organ\",\r\n  \"other\",\r\n  \"otherwise\",\r\n  \"ouch\",\r\n  \"ought\",\r\n  \"our\",\r\n  \"ours\",\r\n  \"ourselves\",\r\n  \"out\",\r\n  \"outdoors\",\r\n  \"outfit\",\r\n  \"outlaw\",\r\n  \"outline\",\r\n  \"outside\",\r\n  \"outward\",\r\n  \"oven\",\r\n  \"over\",\r\n  \"overalls\",\r\n  \"overcoat\",\r\n  \"overeat\",\r\n  \"overhead\",\r\n  \"overhear\",\r\n  \"overnight\",\r\n  \"overturn\",\r\n  \"owe\",\r\n  \"owing\",\r\n  \"owl\",\r\n  \"own\",\r\n  \"owner\",\r\n  \"ox\",\r\n  \"pa\",\r\n  \"pace\",\r\n  \"pack\",\r\n  \"package\",\r\n  \"pad\",\r\n  \"page\",\r\n  \"paid\",\r\n  \"pail\",\r\n  \"pain\",\r\n  \"painful\",\r\n  \"paint\",\r\n  \"painter\",\r\n  \"painting\",\r\n  \"pair\",\r\n  \"pal\",\r\n  \"palace\",\r\n  \"pale\",\r\n  \"pan\",\r\n  \"pancake\",\r\n  \"pane\",\r\n  \"pansy\",\r\n  \"pants\",\r\n  \"papa\",\r\n  \"paper\",\r\n  \"parade\",\r\n  \"pardon\",\r\n  \"parent\",\r\n  \"park\",\r\n  \"part\",\r\n  \"partly\",\r\n  \"partner\",\r\n  \"party\",\r\n  \"pass\",\r\n  \"passenger\",\r\n  \"past\",\r\n  \"paste\",\r\n  \"pasture\",\r\n  \"pat\",\r\n  \"patch\",\r\n  \"path\",\r\n  \"patter\",\r\n  \"pave\",\r\n  \"pavement\",\r\n  \"paw\",\r\n  \"pay\",\r\n  \"payment\",\r\n  \"pea\",\r\n  \"peas\",\r\n  \"peace\",\r\n  \"peaceful\",\r\n  \"peach\",\r\n  \"peaches\",\r\n  \"peak\",\r\n  \"peanut\",\r\n  \"pear\",\r\n  \"pearl\",\r\n  \"peck\",\r\n  \"peek\",\r\n  \"peel\",\r\n  \"peep\",\r\n  \"peg\",\r\n  \"pen\",\r\n  \"pencil\",\r\n  \"penny\",\r\n  \"people\",\r\n  \"pepper\",\r\n  \"peppermint\",\r\n  \"perfume\",\r\n  \"perhaps\",\r\n  \"person\",\r\n  \"pet\",\r\n  \"phone\",\r\n  \"piano\",\r\n  \"pick\",\r\n  \"pickle\",\r\n  \"picnic\",\r\n  \"picture\",\r\n  \"pie\",\r\n  \"piece\",\r\n  \"pig\",\r\n  \"pigeon\",\r\n  \"piggy\",\r\n  \"pile\",\r\n  \"pill\",\r\n  \"pillow\",\r\n  \"pin\",\r\n  \"pine\",\r\n  \"pineapple\",\r\n  \"pink\",\r\n  \"pint\",\r\n  \"pipe\",\r\n  \"pistol\",\r\n  \"pit\",\r\n  \"pitch\",\r\n  \"pitcher\",\r\n  \"pity\",\r\n  \"place\",\r\n  \"plain\",\r\n  \"plan\",\r\n  \"plane\",\r\n  \"plant\",\r\n  \"plate\",\r\n  \"platform\",\r\n  \"platter\",\r\n  \"play\",\r\n  \"player\",\r\n  \"playground\",\r\n  \"playhouse\",\r\n  \"playmate\",\r\n  \"plaything\",\r\n  \"pleasant\",\r\n  \"please\",\r\n  \"pleasure\",\r\n  \"plenty\",\r\n  \"plow\",\r\n  \"plug\",\r\n  \"plum\",\r\n  \"pocket\",\r\n  \"pocketbook\",\r\n  \"poem\",\r\n  \"point\",\r\n  \"poison\",\r\n  \"poke\",\r\n  \"pole\",\r\n  \"police\",\r\n  \"policeman\",\r\n  \"polish\",\r\n  \"polite\",\r\n  \"pond\",\r\n  \"ponies\",\r\n  \"pony\",\r\n  \"pool\",\r\n  \"poor\",\r\n  \"pop\",\r\n  \"popcorn\",\r\n  \"popped\",\r\n  \"porch\",\r\n  \"pork\",\r\n  \"possible\",\r\n  \"post\",\r\n  \"postage\",\r\n  \"postman\",\r\n  \"pot\",\r\n  \"potato\",\r\n  \"potatoes\",\r\n  \"pound\",\r\n  \"pour\",\r\n  \"powder\",\r\n  \"power\",\r\n  \"powerful\",\r\n  \"praise\",\r\n  \"pray\",\r\n  \"prayer\",\r\n  \"prepare\",\r\n  \"present\",\r\n  \"pretty\",\r\n  \"price\",\r\n  \"prick\",\r\n  \"prince\",\r\n  \"princess\",\r\n  \"print\",\r\n  \"prison\",\r\n  \"prize\",\r\n  \"promise\",\r\n  \"proper\",\r\n  \"protect\",\r\n  \"proud\",\r\n  \"prove\",\r\n  \"prune\",\r\n  \"public\",\r\n  \"puddle\",\r\n  \"puff\",\r\n  \"pull\",\r\n  \"pump\",\r\n  \"pumpkin\",\r\n  \"punch\",\r\n  \"punish\",\r\n  \"pup\",\r\n  \"pupil\",\r\n  \"puppy\",\r\n  \"pure\",\r\n  \"purple\",\r\n  \"purse\",\r\n  \"push\",\r\n  \"puss\",\r\n  \"pussy\",\r\n  \"pussycat\",\r\n  \"put\",\r\n  \"putting\",\r\n  \"puzzle\",\r\n  \"quack\",\r\n  \"quart\",\r\n  \"quarter\",\r\n  \"queen\",\r\n  \"queer\",\r\n  \"question\",\r\n  \"quick\",\r\n  \"quickly\",\r\n  \"quiet\",\r\n  \"quilt\",\r\n  \"quit\",\r\n  \"quite\",\r\n  \"rabbit\",\r\n  \"race\",\r\n  \"rack\",\r\n  \"radio\",\r\n  \"radish\",\r\n  \"rag\",\r\n  \"rail\",\r\n  \"railroad\",\r\n  \"railway\",\r\n  \"rain\",\r\n  \"rainy\",\r\n  \"rainbow\",\r\n  \"raise\",\r\n  \"raisin\",\r\n  \"rake\",\r\n  \"ram\",\r\n  \"ran\",\r\n  \"ranch\",\r\n  \"rang\",\r\n  \"rap\",\r\n  \"rapidly\",\r\n  \"rat\",\r\n  \"rate\",\r\n  \"rather\",\r\n  \"rattle\",\r\n  \"raw\",\r\n  \"ray\",\r\n  \"reach\",\r\n  \"read\",\r\n  \"reader\",\r\n  \"reading\",\r\n  \"ready\",\r\n  \"real\",\r\n  \"really\",\r\n  \"reap\",\r\n  \"rear\",\r\n  \"reason\",\r\n  \"rebuild\",\r\n  \"receive\",\r\n  \"recess\",\r\n  \"record\",\r\n  \"red\",\r\n  \"redbird\",\r\n  \"redbreast\",\r\n  \"refuse\",\r\n  \"reindeer\",\r\n  \"rejoice\",\r\n  \"remain\",\r\n  \"remember\",\r\n  \"remind\",\r\n  \"remove\",\r\n  \"rent\",\r\n  \"repair\",\r\n  \"repay\",\r\n  \"repeat\",\r\n  \"report\",\r\n  \"rest\",\r\n  \"return\",\r\n  \"review\",\r\n  \"reward\",\r\n  \"rib\",\r\n  \"ribbon\",\r\n  \"rice\",\r\n  \"rich\",\r\n  \"rid\",\r\n  \"riddle\",\r\n  \"ride\",\r\n  \"rider\",\r\n  \"riding\",\r\n  \"right\",\r\n  \"rim\",\r\n  \"ring\",\r\n  \"rip\",\r\n  \"ripe\",\r\n  \"rise\",\r\n  \"rising\",\r\n  \"river\",\r\n  \"road\",\r\n  \"roadside\",\r\n  \"roar\",\r\n  \"roast\",\r\n  \"rob\",\r\n  \"robber\",\r\n  \"robe\",\r\n  \"robin\",\r\n  \"rock\",\r\n  \"rocky\",\r\n  \"rocket\",\r\n  \"rode\",\r\n  \"roll\",\r\n  \"roller\",\r\n  \"roof\",\r\n  \"room\",\r\n  \"rooster\",\r\n  \"root\",\r\n  \"rope\",\r\n  \"rose\",\r\n  \"rosebud\",\r\n  \"rot\",\r\n  \"rotten\",\r\n  \"rough\",\r\n  \"round\",\r\n  \"route\",\r\n  \"row\",\r\n  \"rowboat\",\r\n  \"royal\",\r\n  \"rub\",\r\n  \"rubbed\",\r\n  \"rubber\",\r\n  \"rubbish\",\r\n  \"rug\",\r\n  \"rule\",\r\n  \"ruler\",\r\n  \"rumble\",\r\n  \"run\",\r\n  \"rung\",\r\n  \"runner\",\r\n  \"running\",\r\n  \"rush\",\r\n  \"rust\",\r\n  \"rusty\",\r\n  \"rye\",\r\n  \"sack\",\r\n  \"sad\",\r\n  \"saddle\",\r\n  \"sadness\",\r\n  \"safe\",\r\n  \"safety\",\r\n  \"said\",\r\n  \"sail\",\r\n  \"sailboat\",\r\n  \"sailor\",\r\n  \"saint\",\r\n  \"salad\",\r\n  \"sale\",\r\n  \"salt\",\r\n  \"same\",\r\n  \"sand\",\r\n  \"sandy\",\r\n  \"sandwich\",\r\n  \"sang\",\r\n  \"sank\",\r\n  \"sap\",\r\n  \"sash\",\r\n  \"sat\",\r\n  \"satin\",\r\n  \"satisfactory\",\r\n  \"saturday\",\r\n  \"sausage\",\r\n  \"savage\",\r\n  \"save\",\r\n  \"savings\",\r\n  \"saw\",\r\n  \"say\",\r\n  \"scab\",\r\n  \"scales\",\r\n  \"scare\",\r\n  \"scarf\",\r\n  \"school\",\r\n  \"schoolboy\",\r\n  \"schoolhouse\",\r\n  \"schoolmaster\",\r\n  \"schoolroom\",\r\n  \"scorch\",\r\n  \"score\",\r\n  \"scrap\",\r\n  \"scrape\",\r\n  \"scratch\",\r\n  \"scream\",\r\n  \"screen\",\r\n  \"screw\",\r\n  \"scrub\",\r\n  \"sea\",\r\n  \"seal\",\r\n  \"seam\",\r\n  \"search\",\r\n  \"season\",\r\n  \"seat\",\r\n  \"second\",\r\n  \"secret\",\r\n  \"see\",\r\n  \"seeing\",\r\n  \"seed\",\r\n  \"seek\",\r\n  \"seem\",\r\n  \"seen\",\r\n  \"seesaw\",\r\n  \"select\",\r\n  \"self\",\r\n  \"selfish\",\r\n  \"sell\",\r\n  \"send\",\r\n  \"sense\",\r\n  \"sent\",\r\n  \"sentence\",\r\n  \"separate\",\r\n  \"september\",\r\n  \"servant\",\r\n  \"serve\",\r\n  \"service\",\r\n  \"set\",\r\n  \"setting\",\r\n  \"settle\",\r\n  \"settlement\",\r\n  \"seven\",\r\n  \"seventeen\",\r\n  \"seventh\",\r\n  \"seventy\",\r\n  \"several\",\r\n  \"sew\",\r\n  \"shade\",\r\n  \"shadow\",\r\n  \"shady\",\r\n  \"shake\",\r\n  \"shaker\",\r\n  \"shaking\",\r\n  \"shall\",\r\n  \"shame\",\r\n  \"shan't\",\r\n  \"shape\",\r\n  \"share\",\r\n  \"sharp\",\r\n  \"shave\",\r\n  \"she\",\r\n  \"she'd\",\r\n  \"she'll\",\r\n  \"she's\",\r\n  \"shear\",\r\n  \"shears\",\r\n  \"shed\",\r\n  \"sheep\",\r\n  \"sheet\",\r\n  \"shelf\",\r\n  \"shell\",\r\n  \"shepherd\",\r\n  \"shine\",\r\n  \"shining\",\r\n  \"shiny\",\r\n  \"ship\",\r\n  \"shirt\",\r\n  \"shock\",\r\n  \"shoe\",\r\n  \"shoemaker\",\r\n  \"shone\",\r\n  \"shook\",\r\n  \"shoot\",\r\n  \"shop\",\r\n  \"shopping\",\r\n  \"shore\",\r\n  \"short\",\r\n  \"shot\",\r\n  \"should\",\r\n  \"shoulder\",\r\n  \"shouldn't\",\r\n  \"shout\",\r\n  \"shovel\",\r\n  \"show\",\r\n  \"shower\",\r\n  \"shut\",\r\n  \"shy\",\r\n  \"sick\",\r\n  \"sickness\",\r\n  \"side\",\r\n  \"sidewalk\",\r\n  \"sideways\",\r\n  \"sigh\",\r\n  \"sight\",\r\n  \"sign\",\r\n  \"silence\",\r\n  \"silent\",\r\n  \"silk\",\r\n  \"sill\",\r\n  \"silly\",\r\n  \"silver\",\r\n  \"simple\",\r\n  \"sin\",\r\n  \"since\",\r\n  \"sing\",\r\n  \"singer\",\r\n  \"single\",\r\n  \"sink\",\r\n  \"sip\",\r\n  \"sir\",\r\n  \"sis\",\r\n  \"sissy\",\r\n  \"sister\",\r\n  \"sit\",\r\n  \"sitting\",\r\n  \"six\",\r\n  \"sixteen\",\r\n  \"sixth\",\r\n  \"sixty\",\r\n  \"size\",\r\n  \"skate\",\r\n  \"skater\",\r\n  \"ski\",\r\n  \"skin\",\r\n  \"skip\",\r\n  \"skirt\",\r\n  \"sky\",\r\n  \"slam\",\r\n  \"slap\",\r\n  \"slate\",\r\n  \"slave\",\r\n  \"sled\",\r\n  \"sleep\",\r\n  \"sleepy\",\r\n  \"sleeve\",\r\n  \"sleigh\",\r\n  \"slept\",\r\n  \"slice\",\r\n  \"slid\",\r\n  \"slide\",\r\n  \"sling\",\r\n  \"slip\",\r\n  \"slipped\",\r\n  \"slipper\",\r\n  \"slippery\",\r\n  \"slit\",\r\n  \"slow\",\r\n  \"slowly\",\r\n  \"sly\",\r\n  \"smack\",\r\n  \"small\",\r\n  \"smart\",\r\n  \"smell\",\r\n  \"smile\",\r\n  \"smoke\",\r\n  \"smooth\",\r\n  \"snail\",\r\n  \"snake\",\r\n  \"snap\",\r\n  \"snapping\",\r\n  \"sneeze\",\r\n  \"snow\",\r\n  \"snowy\",\r\n  \"snowball\",\r\n  \"snowflake\",\r\n  \"snuff\",\r\n  \"snug\",\r\n  \"so\",\r\n  \"soak\",\r\n  \"soap\",\r\n  \"sob\",\r\n  \"socks\",\r\n  \"sod\",\r\n  \"soda\",\r\n  \"sofa\",\r\n  \"soft\",\r\n  \"soil\",\r\n  \"sold\",\r\n  \"soldier\",\r\n  \"sole\",\r\n  \"some\",\r\n  \"somebody\",\r\n  \"somehow\",\r\n  \"someone\",\r\n  \"something\",\r\n  \"sometime\",\r\n  \"sometimes\",\r\n  \"somewhere\",\r\n  \"son\",\r\n  \"song\",\r\n  \"soon\",\r\n  \"sore\",\r\n  \"sorrow\",\r\n  \"sorry\",\r\n  \"sort\",\r\n  \"soul\",\r\n  \"sound\",\r\n  \"soup\",\r\n  \"sour\",\r\n  \"south\",\r\n  \"southern\",\r\n  \"space\",\r\n  \"spade\",\r\n  \"spank\",\r\n  \"sparrow\",\r\n  \"speak\",\r\n  \"speaker\",\r\n  \"spear\",\r\n  \"speech\",\r\n  \"speed\",\r\n  \"spell\",\r\n  \"spelling\",\r\n  \"spend\",\r\n  \"spent\",\r\n  \"spider\",\r\n  \"spike\",\r\n  \"spill\",\r\n  \"spin\",\r\n  \"spinach\",\r\n  \"spirit\",\r\n  \"spit\",\r\n  \"splash\",\r\n  \"spoil\",\r\n  \"spoke\",\r\n  \"spook\",\r\n  \"spoon\",\r\n  \"sport\",\r\n  \"spot\",\r\n  \"spread\",\r\n  \"spring\",\r\n  \"springtime\",\r\n  \"sprinkle\",\r\n  \"square\",\r\n  \"squash\",\r\n  \"squeak\",\r\n  \"squeeze\",\r\n  \"squirrel\",\r\n  \"stable\",\r\n  \"stack\",\r\n  \"stage\",\r\n  \"stair\",\r\n  \"stall\",\r\n  \"stamp\",\r\n  \"stand\",\r\n  \"star\",\r\n  \"stare\",\r\n  \"start\",\r\n  \"starve\",\r\n  \"state\",\r\n  \"station\",\r\n  \"stay\",\r\n  \"steak\",\r\n  \"steal\",\r\n  \"steam\",\r\n  \"steamboat\",\r\n  \"steamer\",\r\n  \"steel\",\r\n  \"steep\",\r\n  \"steeple\",\r\n  \"steer\",\r\n  \"stem\",\r\n  \"step\",\r\n  \"stepping\",\r\n  \"stick\",\r\n  \"sticky\",\r\n  \"stiff\",\r\n  \"still\",\r\n  \"stillness\",\r\n  \"sting\",\r\n  \"stir\",\r\n  \"stitch\",\r\n  \"stock\",\r\n  \"stocking\",\r\n  \"stole\",\r\n  \"stone\",\r\n  \"stood\",\r\n  \"stool\",\r\n  \"stoop\",\r\n  \"stop\",\r\n  \"stopped\",\r\n  \"stopping\",\r\n  \"store\",\r\n  \"stork\",\r\n  \"stories\",\r\n  \"storm\",\r\n  \"stormy\",\r\n  \"story\",\r\n  \"stove\",\r\n  \"straight\",\r\n  \"strange\",\r\n  \"stranger\",\r\n  \"strap\",\r\n  \"straw\",\r\n  \"strawberry\",\r\n  \"stream\",\r\n  \"street\",\r\n  \"stretch\",\r\n  \"string\",\r\n  \"strip\",\r\n  \"stripes\",\r\n  \"strong\",\r\n  \"stuck\",\r\n  \"study\",\r\n  \"stuff\",\r\n  \"stump\",\r\n  \"stung\",\r\n  \"subject\",\r\n  \"such\",\r\n  \"suck\",\r\n  \"sudden\",\r\n  \"suffer\",\r\n  \"sugar\",\r\n  \"suit\",\r\n  \"sum\",\r\n  \"summer\",\r\n  \"sun\",\r\n  \"sunday\",\r\n  \"sunflower\",\r\n  \"sung\",\r\n  \"sunk\",\r\n  \"sunlight\",\r\n  \"sunny\",\r\n  \"sunrise\",\r\n  \"sunset\",\r\n  \"sunshine\",\r\n  \"supper\",\r\n  \"suppose\",\r\n  \"sure\",\r\n  \"surely\",\r\n  \"surface\",\r\n  \"surprise\",\r\n  \"swallow\",\r\n  \"swam\",\r\n  \"swamp\",\r\n  \"swan\",\r\n  \"swat\",\r\n  \"swear\",\r\n  \"sweat\",\r\n  \"sweater\",\r\n  \"sweep\",\r\n  \"sweet\",\r\n  \"sweetness\",\r\n  \"sweetheart\",\r\n  \"swell\",\r\n  \"swept\",\r\n  \"swift\",\r\n  \"swim\",\r\n  \"swimming\",\r\n  \"swing\",\r\n  \"switch\",\r\n  \"sword\",\r\n  \"swore\",\r\n  \"table\",\r\n  \"tablecloth\",\r\n  \"tablespoon\",\r\n  \"tablet\",\r\n  \"tack\",\r\n  \"tag\",\r\n  \"tail\",\r\n  \"tailor\",\r\n  \"take\",\r\n  \"taken\",\r\n  \"taking\",\r\n  \"tale\",\r\n  \"talk\",\r\n  \"talker\",\r\n  \"tall\",\r\n  \"tame\",\r\n  \"tan\",\r\n  \"tank\",\r\n  \"tap\",\r\n  \"tape\",\r\n  \"tar\",\r\n  \"tardy\",\r\n  \"task\",\r\n  \"taste\",\r\n  \"taught\",\r\n  \"tax\",\r\n  \"tea\",\r\n  \"teach\",\r\n  \"teacher\",\r\n  \"team\",\r\n  \"tear\",\r\n  \"tease\",\r\n  \"teaspoon\",\r\n  \"teeth\",\r\n  \"telephone\",\r\n  \"tell\",\r\n  \"temper\",\r\n  \"ten\",\r\n  \"tennis\",\r\n  \"tent\",\r\n  \"term\",\r\n  \"terrible\",\r\n  \"test\",\r\n  \"than\",\r\n  \"thank\",\r\n  \"thanks\",\r\n  \"thankful\",\r\n  \"thanksgiving\",\r\n  \"that\",\r\n  \"that's\",\r\n  \"the\",\r\n  \"theater\",\r\n  \"thee\",\r\n  \"their\",\r\n  \"them\",\r\n  \"then\",\r\n  \"there\",\r\n  \"these\",\r\n  \"they\",\r\n  \"they'd\",\r\n  \"they'll\",\r\n  \"they're\",\r\n  \"they've\",\r\n  \"thick\",\r\n  \"thief\",\r\n  \"thimble\",\r\n  \"thin\",\r\n  \"thing\",\r\n  \"think\",\r\n  \"third\",\r\n  \"thirsty\",\r\n  \"thirteen\",\r\n  \"thirty\",\r\n  \"this\",\r\n  \"thorn\",\r\n  \"those\",\r\n  \"though\",\r\n  \"thought\",\r\n  \"thousand\",\r\n  \"thread\",\r\n  \"three\",\r\n  \"threw\",\r\n  \"throat\",\r\n  \"throne\",\r\n  \"through\",\r\n  \"throw\",\r\n  \"thrown\",\r\n  \"thumb\",\r\n  \"thunder\",\r\n  \"thursday\",\r\n  \"thy\",\r\n  \"tick\",\r\n  \"ticket\",\r\n  \"tickle\",\r\n  \"tie\",\r\n  \"tiger\",\r\n  \"tight\",\r\n  \"till\",\r\n  \"time\",\r\n  \"tin\",\r\n  \"tinkle\",\r\n  \"tiny\",\r\n  \"tip\",\r\n  \"tiptoe\",\r\n  \"tire\",\r\n  \"tired\",\r\n  \"title\",\r\n  \"to\",\r\n  \"toad\",\r\n  \"toadstool\",\r\n  \"toast\",\r\n  \"tobacco\",\r\n  \"today\",\r\n  \"toe\",\r\n  \"together\",\r\n  \"toilet\",\r\n  \"told\",\r\n  \"tomato\",\r\n  \"tomorrow\",\r\n  \"ton\",\r\n  \"tone\",\r\n  \"tongue\",\r\n  \"tonight\",\r\n  \"too\",\r\n  \"took\",\r\n  \"tool\",\r\n  \"toot\",\r\n  \"tooth\",\r\n  \"toothbrush\",\r\n  \"toothpick\",\r\n  \"top\",\r\n  \"tore\",\r\n  \"torn\",\r\n  \"toss\",\r\n  \"touch\",\r\n  \"tow\",\r\n  \"toward\",\r\n  \"towards\",\r\n  \"towel\",\r\n  \"tower\",\r\n  \"town\",\r\n  \"toy\",\r\n  \"trace\",\r\n  \"track\",\r\n  \"trade\",\r\n  \"train\",\r\n  \"tramp\",\r\n  \"trap\",\r\n  \"tray\",\r\n  \"treasure\",\r\n  \"treat\",\r\n  \"tree\",\r\n  \"trick\",\r\n  \"tricycle\",\r\n  \"tried\",\r\n  \"trim\",\r\n  \"trip\",\r\n  \"trolley\",\r\n  \"trouble\",\r\n  \"truck\",\r\n  \"true\",\r\n  \"truly\",\r\n  \"trunk\",\r\n  \"trust\",\r\n  \"truth\",\r\n  \"try\",\r\n  \"tub\",\r\n  \"tuesday\",\r\n  \"tug\",\r\n  \"tulip\",\r\n  \"tumble\",\r\n  \"tune\",\r\n  \"tunnel\",\r\n  \"turkey\",\r\n  \"turn\",\r\n  \"turtle\",\r\n  \"twelve\",\r\n  \"twenty\",\r\n  \"twice\",\r\n  \"twig\",\r\n  \"twin\",\r\n  \"two\",\r\n  \"ugly\",\r\n  \"umbrella\",\r\n  \"uncle\",\r\n  \"under\",\r\n  \"understand\",\r\n  \"underwear\",\r\n  \"undress\",\r\n  \"unfair\",\r\n  \"unfinished\",\r\n  \"unfold\",\r\n  \"unfriendly\",\r\n  \"unhappy\",\r\n  \"unhurt\",\r\n  \"uniform\",\r\n  \"united\",\r\n  \"states\",\r\n  \"unkind\",\r\n  \"unknown\",\r\n  \"unless\",\r\n  \"unpleasant\",\r\n  \"until\",\r\n  \"unwilling\",\r\n  \"up\",\r\n  \"upon\",\r\n  \"upper\",\r\n  \"upset\",\r\n  \"upside\",\r\n  \"upstairs\",\r\n  \"uptown\",\r\n  \"upward\",\r\n  \"us\",\r\n  \"use\",\r\n  \"used\",\r\n  \"useful\",\r\n  \"valentine\",\r\n  \"valley\",\r\n  \"valuable\",\r\n  \"value\",\r\n  \"vase\",\r\n  \"vegetable\",\r\n  \"velvet\",\r\n  \"very\",\r\n  \"vessel\",\r\n  \"victory\",\r\n  \"view\",\r\n  \"village\",\r\n  \"vine\",\r\n  \"violet\",\r\n  \"visit\",\r\n  \"visitor\",\r\n  \"voice\",\r\n  \"vote\",\r\n  \"wag\",\r\n  \"wagon\",\r\n  \"waist\",\r\n  \"wait\",\r\n  \"wake\",\r\n  \"waken\",\r\n  \"walk\",\r\n  \"wall\",\r\n  \"walnut\",\r\n  \"want\",\r\n  \"war\",\r\n  \"warm\",\r\n  \"warn\",\r\n  \"was\",\r\n  \"wash\",\r\n  \"washer\",\r\n  \"washtub\",\r\n  \"wasn't\",\r\n  \"waste\",\r\n  \"watch\",\r\n  \"watchman\",\r\n  \"water\",\r\n  \"watermelon\",\r\n  \"waterproof\",\r\n  \"wave\",\r\n  \"wax\",\r\n  \"way\",\r\n  \"wayside\",\r\n  \"we\",\r\n  \"weak\",\r\n  \"weakness\",\r\n  \"weaken\",\r\n  \"wealth\",\r\n  \"weapon\",\r\n  \"wear\",\r\n  \"weary\",\r\n  \"weather\",\r\n  \"weave\",\r\n  \"web\",\r\n  \"we'd\",\r\n  \"wedding\",\r\n  \"wednesday\",\r\n  \"wee\",\r\n  \"weed\",\r\n  \"week\",\r\n  \"we'll\",\r\n  \"weep\",\r\n  \"weigh\",\r\n  \"welcome\",\r\n  \"well\",\r\n  \"went\",\r\n  \"were\",\r\n  \"we're\",\r\n  \"west\",\r\n  \"western\",\r\n  \"wet\",\r\n  \"we've\",\r\n  \"whale\",\r\n  \"what\",\r\n  \"what's\",\r\n  \"wheat\",\r\n  \"wheel\",\r\n  \"when\",\r\n  \"whenever\",\r\n  \"where\",\r\n  \"which\",\r\n  \"while\",\r\n  \"whip\",\r\n  \"whipped\",\r\n  \"whirl\",\r\n  \"whisky\",\r\n  \"whiskey\",\r\n  \"whisper\",\r\n  \"whistle\",\r\n  \"white\",\r\n  \"who\",\r\n  \"who'd\",\r\n  \"whole\",\r\n  \"who'll\",\r\n  \"whom\",\r\n  \"who's\",\r\n  \"whose\",\r\n  \"why\",\r\n  \"wicked\",\r\n  \"wide\",\r\n  \"wife\",\r\n  \"wiggle\",\r\n  \"wild\",\r\n  \"wildcat\",\r\n  \"will\",\r\n  \"willing\",\r\n  \"willow\",\r\n  \"win\",\r\n  \"wind\",\r\n  \"windy\",\r\n  \"windmill\",\r\n  \"window\",\r\n  \"wine\",\r\n  \"wing\",\r\n  \"wink\",\r\n  \"winner\",\r\n  \"winter\",\r\n  \"wipe\",\r\n  \"wire\",\r\n  \"wise\",\r\n  \"wish\",\r\n  \"wit\",\r\n  \"witch\",\r\n  \"with\",\r\n  \"without\",\r\n  \"woke\",\r\n  \"wolf\",\r\n  \"woman\",\r\n  \"women\",\r\n  \"won\",\r\n  \"wonder\",\r\n  \"wonderful\",\r\n  \"won't\",\r\n  \"wood\",\r\n  \"wooden\",\r\n  \"woodpecker\",\r\n  \"woods\",\r\n  \"wool\",\r\n  \"woolen\",\r\n  \"word\",\r\n  \"wore\",\r\n  \"work\",\r\n  \"worker\",\r\n  \"workman\",\r\n  \"world\",\r\n  \"worm\",\r\n  \"worn\",\r\n  \"worry\",\r\n  \"worse\",\r\n  \"worst\",\r\n  \"worth\",\r\n  \"would\",\r\n  \"wouldn't\",\r\n  \"wound\",\r\n  \"wove\",\r\n  \"wrap\",\r\n  \"wrapped\",\r\n  \"wreck\",\r\n  \"wren\",\r\n  \"wring\",\r\n  \"write\",\r\n  \"writing\",\r\n  \"written\",\r\n  \"wrong\",\r\n  \"wrote\",\r\n  \"wrung\",\r\n  \"yard\",\r\n  \"yarn\",\r\n  \"year\",\r\n  \"yell\",\r\n  \"yellow\",\r\n  \"yes\",\r\n  \"yesterday\",\r\n  \"yet\",\r\n  \"yolk\",\r\n  \"yonder\",\r\n  \"you\",\r\n  \"you'd\",\r\n  \"you'll\",\r\n  \"young\",\r\n  \"youngster\",\r\n  \"your\",\r\n  \"yours\",\r\n  \"you're\",\r\n  \"yourself\",\r\n  \"yourselves\",\r\n  \"youth\",\r\n  \"you've\",\r\n]\r\nexport default easyWords;\r\n"],
  "mappings": "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AM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,OAAM,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,QAAO,KAAI,SAAQ,KAAI,SAAQ,KAAI,SAAQ,KAAI,SAAQ,KAAI,SAAQ,KAAI,SAAQ,KAAI,SA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",
  "names": ["pluralize", "window", "normalize", "charmap", "normalize", "pluralize", "import_pluralize", "readability", "pluralize"]
}
